
led_button_game.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a54  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08003c24  08003c24  00013c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d1c  08003d1c  00020068  2**0
                  CONTENTS
  4 .ARM          00000008  08003d1c  08003d1c  00013d1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d24  08003d24  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d24  08003d24  00013d24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d28  08003d28  00013d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003d2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001bc  20000068  08003d94  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08003d94  00020224  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008742  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000017cf  00000000  00000000  0002881d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00029ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005bc  00000000  00000000  0002a780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021b9f  00000000  00000000  0002ad3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00009d38  00000000  00000000  0004c8db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ca0e6  00000000  00000000  00056613  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000027fc  00000000  00000000  001206fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00122ef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003c0c 	.word	0x08003c0c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08003c0c 	.word	0x08003c0c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_dmul>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002be:	bf1d      	ittte	ne
 80002c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002c4:	ea94 0f0c 	teqne	r4, ip
 80002c8:	ea95 0f0c 	teqne	r5, ip
 80002cc:	f000 f8de 	bleq	800048c <__aeabi_dmul+0x1dc>
 80002d0:	442c      	add	r4, r5
 80002d2:	ea81 0603 	eor.w	r6, r1, r3
 80002d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002e2:	bf18      	it	ne
 80002e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002f0:	d038      	beq.n	8000364 <__aeabi_dmul+0xb4>
 80002f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002f6:	f04f 0500 	mov.w	r5, #0
 80002fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000302:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000306:	f04f 0600 	mov.w	r6, #0
 800030a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800030e:	f09c 0f00 	teq	ip, #0
 8000312:	bf18      	it	ne
 8000314:	f04e 0e01 	orrne.w	lr, lr, #1
 8000318:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800031c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000320:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000324:	d204      	bcs.n	8000330 <__aeabi_dmul+0x80>
 8000326:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800032a:	416d      	adcs	r5, r5
 800032c:	eb46 0606 	adc.w	r6, r6, r6
 8000330:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000334:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000338:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800033c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000340:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000344:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000348:	bf88      	it	hi
 800034a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800034e:	d81e      	bhi.n	800038e <__aeabi_dmul+0xde>
 8000350:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000354:	bf08      	it	eq
 8000356:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800035a:	f150 0000 	adcs.w	r0, r0, #0
 800035e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000368:	ea46 0101 	orr.w	r1, r6, r1
 800036c:	ea40 0002 	orr.w	r0, r0, r2
 8000370:	ea81 0103 	eor.w	r1, r1, r3
 8000374:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000378:	bfc2      	ittt	gt
 800037a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800037e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000382:	bd70      	popgt	{r4, r5, r6, pc}
 8000384:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000388:	f04f 0e00 	mov.w	lr, #0
 800038c:	3c01      	subs	r4, #1
 800038e:	f300 80ab 	bgt.w	80004e8 <__aeabi_dmul+0x238>
 8000392:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000396:	bfde      	ittt	le
 8000398:	2000      	movle	r0, #0
 800039a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800039e:	bd70      	pople	{r4, r5, r6, pc}
 80003a0:	f1c4 0400 	rsb	r4, r4, #0
 80003a4:	3c20      	subs	r4, #32
 80003a6:	da35      	bge.n	8000414 <__aeabi_dmul+0x164>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc1b      	bgt.n	80003e4 <__aeabi_dmul+0x134>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0520 	rsb	r5, r4, #32
 80003b4:	fa00 f305 	lsl.w	r3, r0, r5
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f205 	lsl.w	r2, r1, r5
 80003c0:	ea40 0002 	orr.w	r0, r0, r2
 80003c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003d0:	fa21 f604 	lsr.w	r6, r1, r4
 80003d4:	eb42 0106 	adc.w	r1, r2, r6
 80003d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003dc:	bf08      	it	eq
 80003de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003e2:	bd70      	pop	{r4, r5, r6, pc}
 80003e4:	f1c4 040c 	rsb	r4, r4, #12
 80003e8:	f1c4 0520 	rsb	r5, r4, #32
 80003ec:	fa00 f304 	lsl.w	r3, r0, r4
 80003f0:	fa20 f005 	lsr.w	r0, r0, r5
 80003f4:	fa01 f204 	lsl.w	r2, r1, r4
 80003f8:	ea40 0002 	orr.w	r0, r0, r2
 80003fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000400:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000404:	f141 0100 	adc.w	r1, r1, #0
 8000408:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800040c:	bf08      	it	eq
 800040e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000412:	bd70      	pop	{r4, r5, r6, pc}
 8000414:	f1c4 0520 	rsb	r5, r4, #32
 8000418:	fa00 f205 	lsl.w	r2, r0, r5
 800041c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000420:	fa20 f304 	lsr.w	r3, r0, r4
 8000424:	fa01 f205 	lsl.w	r2, r1, r5
 8000428:	ea43 0302 	orr.w	r3, r3, r2
 800042c:	fa21 f004 	lsr.w	r0, r1, r4
 8000430:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000434:	fa21 f204 	lsr.w	r2, r1, r4
 8000438:	ea20 0002 	bic.w	r0, r0, r2
 800043c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000440:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000444:	bf08      	it	eq
 8000446:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f094 0f00 	teq	r4, #0
 8000450:	d10f      	bne.n	8000472 <__aeabi_dmul+0x1c2>
 8000452:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000456:	0040      	lsls	r0, r0, #1
 8000458:	eb41 0101 	adc.w	r1, r1, r1
 800045c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000460:	bf08      	it	eq
 8000462:	3c01      	subeq	r4, #1
 8000464:	d0f7      	beq.n	8000456 <__aeabi_dmul+0x1a6>
 8000466:	ea41 0106 	orr.w	r1, r1, r6
 800046a:	f095 0f00 	teq	r5, #0
 800046e:	bf18      	it	ne
 8000470:	4770      	bxne	lr
 8000472:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000476:	0052      	lsls	r2, r2, #1
 8000478:	eb43 0303 	adc.w	r3, r3, r3
 800047c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000480:	bf08      	it	eq
 8000482:	3d01      	subeq	r5, #1
 8000484:	d0f7      	beq.n	8000476 <__aeabi_dmul+0x1c6>
 8000486:	ea43 0306 	orr.w	r3, r3, r6
 800048a:	4770      	bx	lr
 800048c:	ea94 0f0c 	teq	r4, ip
 8000490:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000494:	bf18      	it	ne
 8000496:	ea95 0f0c 	teqne	r5, ip
 800049a:	d00c      	beq.n	80004b6 <__aeabi_dmul+0x206>
 800049c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004a0:	bf18      	it	ne
 80004a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004a6:	d1d1      	bne.n	800044c <__aeabi_dmul+0x19c>
 80004a8:	ea81 0103 	eor.w	r1, r1, r3
 80004ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004b0:	f04f 0000 	mov.w	r0, #0
 80004b4:	bd70      	pop	{r4, r5, r6, pc}
 80004b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ba:	bf06      	itte	eq
 80004bc:	4610      	moveq	r0, r2
 80004be:	4619      	moveq	r1, r3
 80004c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004c4:	d019      	beq.n	80004fa <__aeabi_dmul+0x24a>
 80004c6:	ea94 0f0c 	teq	r4, ip
 80004ca:	d102      	bne.n	80004d2 <__aeabi_dmul+0x222>
 80004cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004d0:	d113      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004d2:	ea95 0f0c 	teq	r5, ip
 80004d6:	d105      	bne.n	80004e4 <__aeabi_dmul+0x234>
 80004d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004dc:	bf1c      	itt	ne
 80004de:	4610      	movne	r0, r2
 80004e0:	4619      	movne	r1, r3
 80004e2:	d10a      	bne.n	80004fa <__aeabi_dmul+0x24a>
 80004e4:	ea81 0103 	eor.w	r1, r1, r3
 80004e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd70      	pop	{r4, r5, r6, pc}
 80004fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000502:	bd70      	pop	{r4, r5, r6, pc}

08000504 <__aeabi_drsub>:
 8000504:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000508:	e002      	b.n	8000510 <__adddf3>
 800050a:	bf00      	nop

0800050c <__aeabi_dsub>:
 800050c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000510 <__adddf3>:
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000516:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800051a:	ea94 0f05 	teq	r4, r5
 800051e:	bf08      	it	eq
 8000520:	ea90 0f02 	teqeq	r0, r2
 8000524:	bf1f      	itttt	ne
 8000526:	ea54 0c00 	orrsne.w	ip, r4, r0
 800052a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800052e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000532:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000536:	f000 80e2 	beq.w	80006fe <__adddf3+0x1ee>
 800053a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800053e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000542:	bfb8      	it	lt
 8000544:	426d      	neglt	r5, r5
 8000546:	dd0c      	ble.n	8000562 <__adddf3+0x52>
 8000548:	442c      	add	r4, r5
 800054a:	ea80 0202 	eor.w	r2, r0, r2
 800054e:	ea81 0303 	eor.w	r3, r1, r3
 8000552:	ea82 0000 	eor.w	r0, r2, r0
 8000556:	ea83 0101 	eor.w	r1, r3, r1
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	2d36      	cmp	r5, #54	; 0x36
 8000564:	bf88      	it	hi
 8000566:	bd30      	pophi	{r4, r5, pc}
 8000568:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800056c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000570:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000574:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000578:	d002      	beq.n	8000580 <__adddf3+0x70>
 800057a:	4240      	negs	r0, r0
 800057c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000580:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000584:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000588:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800058c:	d002      	beq.n	8000594 <__adddf3+0x84>
 800058e:	4252      	negs	r2, r2
 8000590:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000594:	ea94 0f05 	teq	r4, r5
 8000598:	f000 80a7 	beq.w	80006ea <__adddf3+0x1da>
 800059c:	f1a4 0401 	sub.w	r4, r4, #1
 80005a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005a4:	db0d      	blt.n	80005c2 <__adddf3+0xb2>
 80005a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005aa:	fa22 f205 	lsr.w	r2, r2, r5
 80005ae:	1880      	adds	r0, r0, r2
 80005b0:	f141 0100 	adc.w	r1, r1, #0
 80005b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005b8:	1880      	adds	r0, r0, r2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	4159      	adcs	r1, r3
 80005c0:	e00e      	b.n	80005e0 <__adddf3+0xd0>
 80005c2:	f1a5 0520 	sub.w	r5, r5, #32
 80005c6:	f10e 0e20 	add.w	lr, lr, #32
 80005ca:	2a01      	cmp	r2, #1
 80005cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005d0:	bf28      	it	cs
 80005d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005d6:	fa43 f305 	asr.w	r3, r3, r5
 80005da:	18c0      	adds	r0, r0, r3
 80005dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	d507      	bpl.n	80005f6 <__adddf3+0xe6>
 80005e6:	f04f 0e00 	mov.w	lr, #0
 80005ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005fa:	d31b      	bcc.n	8000634 <__adddf3+0x124>
 80005fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000600:	d30c      	bcc.n	800061c <__adddf3+0x10c>
 8000602:	0849      	lsrs	r1, r1, #1
 8000604:	ea5f 0030 	movs.w	r0, r0, rrx
 8000608:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800060c:	f104 0401 	add.w	r4, r4, #1
 8000610:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000614:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000618:	f080 809a 	bcs.w	8000750 <__adddf3+0x240>
 800061c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	ea41 0105 	orr.w	r1, r1, r5
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000638:	4140      	adcs	r0, r0
 800063a:	eb41 0101 	adc.w	r1, r1, r1
 800063e:	3c01      	subs	r4, #1
 8000640:	bf28      	it	cs
 8000642:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000646:	d2e9      	bcs.n	800061c <__adddf3+0x10c>
 8000648:	f091 0f00 	teq	r1, #0
 800064c:	bf04      	itt	eq
 800064e:	4601      	moveq	r1, r0
 8000650:	2000      	moveq	r0, #0
 8000652:	fab1 f381 	clz	r3, r1
 8000656:	bf08      	it	eq
 8000658:	3320      	addeq	r3, #32
 800065a:	f1a3 030b 	sub.w	r3, r3, #11
 800065e:	f1b3 0220 	subs.w	r2, r3, #32
 8000662:	da0c      	bge.n	800067e <__adddf3+0x16e>
 8000664:	320c      	adds	r2, #12
 8000666:	dd08      	ble.n	800067a <__adddf3+0x16a>
 8000668:	f102 0c14 	add.w	ip, r2, #20
 800066c:	f1c2 020c 	rsb	r2, r2, #12
 8000670:	fa01 f00c 	lsl.w	r0, r1, ip
 8000674:	fa21 f102 	lsr.w	r1, r1, r2
 8000678:	e00c      	b.n	8000694 <__adddf3+0x184>
 800067a:	f102 0214 	add.w	r2, r2, #20
 800067e:	bfd8      	it	le
 8000680:	f1c2 0c20 	rsble	ip, r2, #32
 8000684:	fa01 f102 	lsl.w	r1, r1, r2
 8000688:	fa20 fc0c 	lsr.w	ip, r0, ip
 800068c:	bfdc      	itt	le
 800068e:	ea41 010c 	orrle.w	r1, r1, ip
 8000692:	4090      	lslle	r0, r2
 8000694:	1ae4      	subs	r4, r4, r3
 8000696:	bfa2      	ittt	ge
 8000698:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800069c:	4329      	orrge	r1, r5
 800069e:	bd30      	popge	{r4, r5, pc}
 80006a0:	ea6f 0404 	mvn.w	r4, r4
 80006a4:	3c1f      	subs	r4, #31
 80006a6:	da1c      	bge.n	80006e2 <__adddf3+0x1d2>
 80006a8:	340c      	adds	r4, #12
 80006aa:	dc0e      	bgt.n	80006ca <__adddf3+0x1ba>
 80006ac:	f104 0414 	add.w	r4, r4, #20
 80006b0:	f1c4 0220 	rsb	r2, r4, #32
 80006b4:	fa20 f004 	lsr.w	r0, r0, r4
 80006b8:	fa01 f302 	lsl.w	r3, r1, r2
 80006bc:	ea40 0003 	orr.w	r0, r0, r3
 80006c0:	fa21 f304 	lsr.w	r3, r1, r4
 80006c4:	ea45 0103 	orr.w	r1, r5, r3
 80006c8:	bd30      	pop	{r4, r5, pc}
 80006ca:	f1c4 040c 	rsb	r4, r4, #12
 80006ce:	f1c4 0220 	rsb	r2, r4, #32
 80006d2:	fa20 f002 	lsr.w	r0, r0, r2
 80006d6:	fa01 f304 	lsl.w	r3, r1, r4
 80006da:	ea40 0003 	orr.w	r0, r0, r3
 80006de:	4629      	mov	r1, r5
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	fa21 f004 	lsr.w	r0, r1, r4
 80006e6:	4629      	mov	r1, r5
 80006e8:	bd30      	pop	{r4, r5, pc}
 80006ea:	f094 0f00 	teq	r4, #0
 80006ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006f2:	bf06      	itte	eq
 80006f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006f8:	3401      	addeq	r4, #1
 80006fa:	3d01      	subne	r5, #1
 80006fc:	e74e      	b.n	800059c <__adddf3+0x8c>
 80006fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000702:	bf18      	it	ne
 8000704:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000708:	d029      	beq.n	800075e <__adddf3+0x24e>
 800070a:	ea94 0f05 	teq	r4, r5
 800070e:	bf08      	it	eq
 8000710:	ea90 0f02 	teqeq	r0, r2
 8000714:	d005      	beq.n	8000722 <__adddf3+0x212>
 8000716:	ea54 0c00 	orrs.w	ip, r4, r0
 800071a:	bf04      	itt	eq
 800071c:	4619      	moveq	r1, r3
 800071e:	4610      	moveq	r0, r2
 8000720:	bd30      	pop	{r4, r5, pc}
 8000722:	ea91 0f03 	teq	r1, r3
 8000726:	bf1e      	ittt	ne
 8000728:	2100      	movne	r1, #0
 800072a:	2000      	movne	r0, #0
 800072c:	bd30      	popne	{r4, r5, pc}
 800072e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000732:	d105      	bne.n	8000740 <__adddf3+0x230>
 8000734:	0040      	lsls	r0, r0, #1
 8000736:	4149      	adcs	r1, r1
 8000738:	bf28      	it	cs
 800073a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd30      	pop	{r4, r5, pc}
 8000740:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000744:	bf3c      	itt	cc
 8000746:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800074a:	bd30      	popcc	{r4, r5, pc}
 800074c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000750:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000754:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd30      	pop	{r4, r5, pc}
 800075e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000762:	bf1a      	itte	ne
 8000764:	4619      	movne	r1, r3
 8000766:	4610      	movne	r0, r2
 8000768:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800076c:	bf1c      	itt	ne
 800076e:	460b      	movne	r3, r1
 8000770:	4602      	movne	r2, r0
 8000772:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000776:	bf06      	itte	eq
 8000778:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800077c:	ea91 0f03 	teqeq	r1, r3
 8000780:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000784:	bd30      	pop	{r4, r5, pc}
 8000786:	bf00      	nop

08000788 <__aeabi_ui2d>:
 8000788:	f090 0f00 	teq	r0, #0
 800078c:	bf04      	itt	eq
 800078e:	2100      	moveq	r1, #0
 8000790:	4770      	bxeq	lr
 8000792:	b530      	push	{r4, r5, lr}
 8000794:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000798:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800079c:	f04f 0500 	mov.w	r5, #0
 80007a0:	f04f 0100 	mov.w	r1, #0
 80007a4:	e750      	b.n	8000648 <__adddf3+0x138>
 80007a6:	bf00      	nop

080007a8 <__aeabi_i2d>:
 80007a8:	f090 0f00 	teq	r0, #0
 80007ac:	bf04      	itt	eq
 80007ae:	2100      	moveq	r1, #0
 80007b0:	4770      	bxeq	lr
 80007b2:	b530      	push	{r4, r5, lr}
 80007b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007c0:	bf48      	it	mi
 80007c2:	4240      	negmi	r0, r0
 80007c4:	f04f 0100 	mov.w	r1, #0
 80007c8:	e73e      	b.n	8000648 <__adddf3+0x138>
 80007ca:	bf00      	nop

080007cc <__aeabi_f2d>:
 80007cc:	0042      	lsls	r2, r0, #1
 80007ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007da:	bf1f      	itttt	ne
 80007dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007e8:	4770      	bxne	lr
 80007ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ee:	bf08      	it	eq
 80007f0:	4770      	bxeq	lr
 80007f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007f6:	bf04      	itt	eq
 80007f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007fc:	4770      	bxeq	lr
 80007fe:	b530      	push	{r4, r5, lr}
 8000800:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000804:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000808:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800080c:	e71c      	b.n	8000648 <__adddf3+0x138>
 800080e:	bf00      	nop

08000810 <__aeabi_ul2d>:
 8000810:	ea50 0201 	orrs.w	r2, r0, r1
 8000814:	bf08      	it	eq
 8000816:	4770      	bxeq	lr
 8000818:	b530      	push	{r4, r5, lr}
 800081a:	f04f 0500 	mov.w	r5, #0
 800081e:	e00a      	b.n	8000836 <__aeabi_l2d+0x16>

08000820 <__aeabi_l2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800082e:	d502      	bpl.n	8000836 <__aeabi_l2d+0x16>
 8000830:	4240      	negs	r0, r0
 8000832:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000836:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800083a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800083e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000842:	f43f aed8 	beq.w	80005f6 <__adddf3+0xe6>
 8000846:	f04f 0203 	mov.w	r2, #3
 800084a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800084e:	bf18      	it	ne
 8000850:	3203      	addne	r2, #3
 8000852:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000856:	bf18      	it	ne
 8000858:	3203      	addne	r2, #3
 800085a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800085e:	f1c2 0320 	rsb	r3, r2, #32
 8000862:	fa00 fc03 	lsl.w	ip, r0, r3
 8000866:	fa20 f002 	lsr.w	r0, r0, r2
 800086a:	fa01 fe03 	lsl.w	lr, r1, r3
 800086e:	ea40 000e 	orr.w	r0, r0, lr
 8000872:	fa21 f102 	lsr.w	r1, r1, r2
 8000876:	4414      	add	r4, r2
 8000878:	e6bd      	b.n	80005f6 <__adddf3+0xe6>
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b970 	b.w	8000c14 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9e08      	ldr	r6, [sp, #32]
 8000952:	460d      	mov	r5, r1
 8000954:	4604      	mov	r4, r0
 8000956:	460f      	mov	r7, r1
 8000958:	2b00      	cmp	r3, #0
 800095a:	d14a      	bne.n	80009f2 <__udivmoddi4+0xa6>
 800095c:	428a      	cmp	r2, r1
 800095e:	4694      	mov	ip, r2
 8000960:	d965      	bls.n	8000a2e <__udivmoddi4+0xe2>
 8000962:	fab2 f382 	clz	r3, r2
 8000966:	b143      	cbz	r3, 800097a <__udivmoddi4+0x2e>
 8000968:	fa02 fc03 	lsl.w	ip, r2, r3
 800096c:	f1c3 0220 	rsb	r2, r3, #32
 8000970:	409f      	lsls	r7, r3
 8000972:	fa20 f202 	lsr.w	r2, r0, r2
 8000976:	4317      	orrs	r7, r2
 8000978:	409c      	lsls	r4, r3
 800097a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800097e:	fa1f f58c 	uxth.w	r5, ip
 8000982:	fbb7 f1fe 	udiv	r1, r7, lr
 8000986:	0c22      	lsrs	r2, r4, #16
 8000988:	fb0e 7711 	mls	r7, lr, r1, r7
 800098c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000990:	fb01 f005 	mul.w	r0, r1, r5
 8000994:	4290      	cmp	r0, r2
 8000996:	d90a      	bls.n	80009ae <__udivmoddi4+0x62>
 8000998:	eb1c 0202 	adds.w	r2, ip, r2
 800099c:	f101 37ff 	add.w	r7, r1, #4294967295
 80009a0:	f080 811c 	bcs.w	8000bdc <__udivmoddi4+0x290>
 80009a4:	4290      	cmp	r0, r2
 80009a6:	f240 8119 	bls.w	8000bdc <__udivmoddi4+0x290>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4462      	add	r2, ip
 80009ae:	1a12      	subs	r2, r2, r0
 80009b0:	b2a4      	uxth	r4, r4
 80009b2:	fbb2 f0fe 	udiv	r0, r2, lr
 80009b6:	fb0e 2210 	mls	r2, lr, r0, r2
 80009ba:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009be:	fb00 f505 	mul.w	r5, r0, r5
 80009c2:	42a5      	cmp	r5, r4
 80009c4:	d90a      	bls.n	80009dc <__udivmoddi4+0x90>
 80009c6:	eb1c 0404 	adds.w	r4, ip, r4
 80009ca:	f100 32ff 	add.w	r2, r0, #4294967295
 80009ce:	f080 8107 	bcs.w	8000be0 <__udivmoddi4+0x294>
 80009d2:	42a5      	cmp	r5, r4
 80009d4:	f240 8104 	bls.w	8000be0 <__udivmoddi4+0x294>
 80009d8:	4464      	add	r4, ip
 80009da:	3802      	subs	r0, #2
 80009dc:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80009e0:	1b64      	subs	r4, r4, r5
 80009e2:	2100      	movs	r1, #0
 80009e4:	b11e      	cbz	r6, 80009ee <__udivmoddi4+0xa2>
 80009e6:	40dc      	lsrs	r4, r3
 80009e8:	2300      	movs	r3, #0
 80009ea:	e9c6 4300 	strd	r4, r3, [r6]
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	428b      	cmp	r3, r1
 80009f4:	d908      	bls.n	8000a08 <__udivmoddi4+0xbc>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	f000 80ed 	beq.w	8000bd6 <__udivmoddi4+0x28a>
 80009fc:	2100      	movs	r1, #0
 80009fe:	e9c6 0500 	strd	r0, r5, [r6]
 8000a02:	4608      	mov	r0, r1
 8000a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a08:	fab3 f183 	clz	r1, r3
 8000a0c:	2900      	cmp	r1, #0
 8000a0e:	d149      	bne.n	8000aa4 <__udivmoddi4+0x158>
 8000a10:	42ab      	cmp	r3, r5
 8000a12:	d302      	bcc.n	8000a1a <__udivmoddi4+0xce>
 8000a14:	4282      	cmp	r2, r0
 8000a16:	f200 80f8 	bhi.w	8000c0a <__udivmoddi4+0x2be>
 8000a1a:	1a84      	subs	r4, r0, r2
 8000a1c:	eb65 0203 	sbc.w	r2, r5, r3
 8000a20:	2001      	movs	r0, #1
 8000a22:	4617      	mov	r7, r2
 8000a24:	2e00      	cmp	r6, #0
 8000a26:	d0e2      	beq.n	80009ee <__udivmoddi4+0xa2>
 8000a28:	e9c6 4700 	strd	r4, r7, [r6]
 8000a2c:	e7df      	b.n	80009ee <__udivmoddi4+0xa2>
 8000a2e:	b902      	cbnz	r2, 8000a32 <__udivmoddi4+0xe6>
 8000a30:	deff      	udf	#255	; 0xff
 8000a32:	fab2 f382 	clz	r3, r2
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f040 8090 	bne.w	8000b5c <__udivmoddi4+0x210>
 8000a3c:	1a8a      	subs	r2, r1, r2
 8000a3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a42:	fa1f fe8c 	uxth.w	lr, ip
 8000a46:	2101      	movs	r1, #1
 8000a48:	fbb2 f5f7 	udiv	r5, r2, r7
 8000a4c:	fb07 2015 	mls	r0, r7, r5, r2
 8000a50:	0c22      	lsrs	r2, r4, #16
 8000a52:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000a56:	fb0e f005 	mul.w	r0, lr, r5
 8000a5a:	4290      	cmp	r0, r2
 8000a5c:	d908      	bls.n	8000a70 <__udivmoddi4+0x124>
 8000a5e:	eb1c 0202 	adds.w	r2, ip, r2
 8000a62:	f105 38ff 	add.w	r8, r5, #4294967295
 8000a66:	d202      	bcs.n	8000a6e <__udivmoddi4+0x122>
 8000a68:	4290      	cmp	r0, r2
 8000a6a:	f200 80cb 	bhi.w	8000c04 <__udivmoddi4+0x2b8>
 8000a6e:	4645      	mov	r5, r8
 8000a70:	1a12      	subs	r2, r2, r0
 8000a72:	b2a4      	uxth	r4, r4
 8000a74:	fbb2 f0f7 	udiv	r0, r2, r7
 8000a78:	fb07 2210 	mls	r2, r7, r0, r2
 8000a7c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a80:	fb0e fe00 	mul.w	lr, lr, r0
 8000a84:	45a6      	cmp	lr, r4
 8000a86:	d908      	bls.n	8000a9a <__udivmoddi4+0x14e>
 8000a88:	eb1c 0404 	adds.w	r4, ip, r4
 8000a8c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a90:	d202      	bcs.n	8000a98 <__udivmoddi4+0x14c>
 8000a92:	45a6      	cmp	lr, r4
 8000a94:	f200 80bb 	bhi.w	8000c0e <__udivmoddi4+0x2c2>
 8000a98:	4610      	mov	r0, r2
 8000a9a:	eba4 040e 	sub.w	r4, r4, lr
 8000a9e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000aa2:	e79f      	b.n	80009e4 <__udivmoddi4+0x98>
 8000aa4:	f1c1 0720 	rsb	r7, r1, #32
 8000aa8:	408b      	lsls	r3, r1
 8000aaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000aae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ab2:	fa05 f401 	lsl.w	r4, r5, r1
 8000ab6:	fa20 f307 	lsr.w	r3, r0, r7
 8000aba:	40fd      	lsrs	r5, r7
 8000abc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ac0:	4323      	orrs	r3, r4
 8000ac2:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ac6:	fa1f fe8c 	uxth.w	lr, ip
 8000aca:	fb09 5518 	mls	r5, r9, r8, r5
 8000ace:	0c1c      	lsrs	r4, r3, #16
 8000ad0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000ad4:	fb08 f50e 	mul.w	r5, r8, lr
 8000ad8:	42a5      	cmp	r5, r4
 8000ada:	fa02 f201 	lsl.w	r2, r2, r1
 8000ade:	fa00 f001 	lsl.w	r0, r0, r1
 8000ae2:	d90b      	bls.n	8000afc <__udivmoddi4+0x1b0>
 8000ae4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000aec:	f080 8088 	bcs.w	8000c00 <__udivmoddi4+0x2b4>
 8000af0:	42a5      	cmp	r5, r4
 8000af2:	f240 8085 	bls.w	8000c00 <__udivmoddi4+0x2b4>
 8000af6:	f1a8 0802 	sub.w	r8, r8, #2
 8000afa:	4464      	add	r4, ip
 8000afc:	1b64      	subs	r4, r4, r5
 8000afe:	b29d      	uxth	r5, r3
 8000b00:	fbb4 f3f9 	udiv	r3, r4, r9
 8000b04:	fb09 4413 	mls	r4, r9, r3, r4
 8000b08:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000b0c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000b10:	45a6      	cmp	lr, r4
 8000b12:	d908      	bls.n	8000b26 <__udivmoddi4+0x1da>
 8000b14:	eb1c 0404 	adds.w	r4, ip, r4
 8000b18:	f103 35ff 	add.w	r5, r3, #4294967295
 8000b1c:	d26c      	bcs.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b1e:	45a6      	cmp	lr, r4
 8000b20:	d96a      	bls.n	8000bf8 <__udivmoddi4+0x2ac>
 8000b22:	3b02      	subs	r3, #2
 8000b24:	4464      	add	r4, ip
 8000b26:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2a:	fba3 9502 	umull	r9, r5, r3, r2
 8000b2e:	eba4 040e 	sub.w	r4, r4, lr
 8000b32:	42ac      	cmp	r4, r5
 8000b34:	46c8      	mov	r8, r9
 8000b36:	46ae      	mov	lr, r5
 8000b38:	d356      	bcc.n	8000be8 <__udivmoddi4+0x29c>
 8000b3a:	d053      	beq.n	8000be4 <__udivmoddi4+0x298>
 8000b3c:	b156      	cbz	r6, 8000b54 <__udivmoddi4+0x208>
 8000b3e:	ebb0 0208 	subs.w	r2, r0, r8
 8000b42:	eb64 040e 	sbc.w	r4, r4, lr
 8000b46:	fa04 f707 	lsl.w	r7, r4, r7
 8000b4a:	40ca      	lsrs	r2, r1
 8000b4c:	40cc      	lsrs	r4, r1
 8000b4e:	4317      	orrs	r7, r2
 8000b50:	e9c6 7400 	strd	r7, r4, [r6]
 8000b54:	4618      	mov	r0, r3
 8000b56:	2100      	movs	r1, #0
 8000b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5c:	f1c3 0120 	rsb	r1, r3, #32
 8000b60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b64:	fa20 f201 	lsr.w	r2, r0, r1
 8000b68:	fa25 f101 	lsr.w	r1, r5, r1
 8000b6c:	409d      	lsls	r5, r3
 8000b6e:	432a      	orrs	r2, r5
 8000b70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b74:	fa1f fe8c 	uxth.w	lr, ip
 8000b78:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b7c:	fb07 1510 	mls	r5, r7, r0, r1
 8000b80:	0c11      	lsrs	r1, r2, #16
 8000b82:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000b86:	fb00 f50e 	mul.w	r5, r0, lr
 8000b8a:	428d      	cmp	r5, r1
 8000b8c:	fa04 f403 	lsl.w	r4, r4, r3
 8000b90:	d908      	bls.n	8000ba4 <__udivmoddi4+0x258>
 8000b92:	eb1c 0101 	adds.w	r1, ip, r1
 8000b96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b9a:	d22f      	bcs.n	8000bfc <__udivmoddi4+0x2b0>
 8000b9c:	428d      	cmp	r5, r1
 8000b9e:	d92d      	bls.n	8000bfc <__udivmoddi4+0x2b0>
 8000ba0:	3802      	subs	r0, #2
 8000ba2:	4461      	add	r1, ip
 8000ba4:	1b49      	subs	r1, r1, r5
 8000ba6:	b292      	uxth	r2, r2
 8000ba8:	fbb1 f5f7 	udiv	r5, r1, r7
 8000bac:	fb07 1115 	mls	r1, r7, r5, r1
 8000bb0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000bb4:	fb05 f10e 	mul.w	r1, r5, lr
 8000bb8:	4291      	cmp	r1, r2
 8000bba:	d908      	bls.n	8000bce <__udivmoddi4+0x282>
 8000bbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000bc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bc4:	d216      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bc6:	4291      	cmp	r1, r2
 8000bc8:	d914      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000bca:	3d02      	subs	r5, #2
 8000bcc:	4462      	add	r2, ip
 8000bce:	1a52      	subs	r2, r2, r1
 8000bd0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000bd4:	e738      	b.n	8000a48 <__udivmoddi4+0xfc>
 8000bd6:	4631      	mov	r1, r6
 8000bd8:	4630      	mov	r0, r6
 8000bda:	e708      	b.n	80009ee <__udivmoddi4+0xa2>
 8000bdc:	4639      	mov	r1, r7
 8000bde:	e6e6      	b.n	80009ae <__udivmoddi4+0x62>
 8000be0:	4610      	mov	r0, r2
 8000be2:	e6fb      	b.n	80009dc <__udivmoddi4+0x90>
 8000be4:	4548      	cmp	r0, r9
 8000be6:	d2a9      	bcs.n	8000b3c <__udivmoddi4+0x1f0>
 8000be8:	ebb9 0802 	subs.w	r8, r9, r2
 8000bec:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000bf0:	3b01      	subs	r3, #1
 8000bf2:	e7a3      	b.n	8000b3c <__udivmoddi4+0x1f0>
 8000bf4:	4645      	mov	r5, r8
 8000bf6:	e7ea      	b.n	8000bce <__udivmoddi4+0x282>
 8000bf8:	462b      	mov	r3, r5
 8000bfa:	e794      	b.n	8000b26 <__udivmoddi4+0x1da>
 8000bfc:	4640      	mov	r0, r8
 8000bfe:	e7d1      	b.n	8000ba4 <__udivmoddi4+0x258>
 8000c00:	46d0      	mov	r8, sl
 8000c02:	e77b      	b.n	8000afc <__udivmoddi4+0x1b0>
 8000c04:	3d02      	subs	r5, #2
 8000c06:	4462      	add	r2, ip
 8000c08:	e732      	b.n	8000a70 <__udivmoddi4+0x124>
 8000c0a:	4608      	mov	r0, r1
 8000c0c:	e70a      	b.n	8000a24 <__udivmoddi4+0xd8>
 8000c0e:	4464      	add	r4, ip
 8000c10:	3802      	subs	r0, #2
 8000c12:	e742      	b.n	8000a9a <__udivmoddi4+0x14e>

08000c14 <__aeabi_idiv0>:
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c1e:	f000 fbdd 	bl	80013dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c22:	f000 f8b3 	bl	8000d8c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c26:	f000 f949 	bl	8000ebc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c2a:	f000 f91d 	bl	8000e68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  LED_OFF();
 8000c2e:	f000 f9c7 	bl	8000fc0 <LED_OFF>
  int delay_in_ms = 0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	60fb      	str	r3, [r7, #12]
  float game_timeout_in_ms = 1000;
 8000c36:	4b52      	ldr	r3, [pc, #328]	; (8000d80 <main+0x168>)
 8000c38:	60bb      	str	r3, [r7, #8]
  int previous_time = HAL_GetTick();
 8000c3a:	f000 fc35 	bl	80014a8 <HAL_GetTick>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	607b      	str	r3, [r7, #4]
  bool game_running = false;
 8000c42:	2300      	movs	r3, #0
 8000c44:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (flag)
 8000c46:	4b4f      	ldr	r3, [pc, #316]	; (8000d84 <main+0x16c>)
 8000c48:	781b      	ldrb	r3, [r3, #0]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d029      	beq.n	8000ca2 <main+0x8a>
	  {
		  game_running = false;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	70fb      	strb	r3, [r7, #3]
		  if (IS_LED_ON())
 8000c52:	f000 f9c1 	bl	8000fd8 <IS_LED_ON>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d015      	beq.n	8000c88 <main+0x70>
		  {
			  LED_WIN_SQUENCE();
 8000c5c:	f000 f9cc 	bl	8000ff8 <LED_WIN_SQUENCE>
			  flag = false;
 8000c60:	4b48      	ldr	r3, [pc, #288]	; (8000d84 <main+0x16c>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
			  game_timeout_in_ms *= 0.8;
 8000c66:	68b8      	ldr	r0, [r7, #8]
 8000c68:	f7ff fdb0 	bl	80007cc <__aeabi_f2d>
 8000c6c:	a342      	add	r3, pc, #264	; (adr r3, 8000d78 <main+0x160>)
 8000c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c72:	f7ff fb1d 	bl	80002b0 <__aeabi_dmul>
 8000c76:	4602      	mov	r2, r0
 8000c78:	460b      	mov	r3, r1
 8000c7a:	4610      	mov	r0, r2
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	f7ff fdfd 	bl	800087c <__aeabi_d2f>
 8000c82:	4603      	mov	r3, r0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	e00c      	b.n	8000ca2 <main+0x8a>
//			  LED_OFF();
		  } else
		  {
			  LED_LOSS_SQUENCE();
 8000c88:	f000 f9d1 	bl	800102e <LED_LOSS_SQUENCE>
			  flag = false;
 8000c8c:	4b3d      	ldr	r3, [pc, #244]	; (8000d84 <main+0x16c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	701a      	strb	r2, [r3, #0]
			  game_timeout_in_ms *= 1.25;
 8000c92:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c96:	eeb7 7a04 	vmov.f32	s14, #116	; 0x3fa00000  1.250
 8000c9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c9e:	edc7 7a02 	vstr	s15, [r7, #8]
//			  LED_ON();
		  }
	  }

	  if (game_running)
 8000ca2:	78fb      	ldrb	r3, [r7, #3]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d04e      	beq.n	8000d46 <main+0x12e>
	  {
		  if (HAL_GetTick() >= previous_time + delay_in_ms && HAL_GetTick() < previous_time + delay_in_ms + game_timeout_in_ms )
 8000ca8:	f000 fbfe 	bl	80014a8 <HAL_GetTick>
 8000cac:	4601      	mov	r1, r0
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4299      	cmp	r1, r3
 8000cb6:	d317      	bcc.n	8000ce8 <main+0xd0>
 8000cb8:	f000 fbf6 	bl	80014a8 <HAL_GetTick>
 8000cbc:	ee07 0a90 	vmov	s15, r0
 8000cc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	4413      	add	r3, r2
 8000cca:	ee07 3a90 	vmov	s15, r3
 8000cce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000cd2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000cda:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce2:	d501      	bpl.n	8000ce8 <main+0xd0>
		  {
			  LED_ON();
 8000ce4:	f000 f960 	bl	8000fa8 <LED_ON>
		  }
		  if (HAL_GetTick() >= previous_time + delay_in_ms + game_timeout_in_ms)
 8000ce8:	f000 fbde 	bl	80014a8 <HAL_GetTick>
 8000cec:	ee07 0a90 	vmov	s15, r0
 8000cf0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000cf4:	687a      	ldr	r2, [r7, #4]
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	4413      	add	r3, r2
 8000cfa:	ee07 3a90 	vmov	s15, r3
 8000cfe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000d02:	edd7 7a02 	vldr	s15, [r7, #8]
 8000d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000d0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d12:	db30      	blt.n	8000d76 <main+0x15e>
		  {
			  LED_OFF();
 8000d14:	f000 f954 	bl	8000fc0 <LED_OFF>
			  previous_time = HAL_GetTick();
 8000d18:	f000 fbc6 	bl	80014a8 <HAL_GetTick>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	607b      	str	r3, [r7, #4]
			  delay_in_ms = 1000 * (rand() % 6);
 8000d20:	f001 ff8e 	bl	8002c40 <rand>
 8000d24:	4601      	mov	r1, r0
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <main+0x170>)
 8000d28:	fb83 3201 	smull	r3, r2, r3, r1
 8000d2c:	17cb      	asrs	r3, r1, #31
 8000d2e:	1ad2      	subs	r2, r2, r3
 8000d30:	4613      	mov	r3, r2
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	4413      	add	r3, r2
 8000d36:	005b      	lsls	r3, r3, #1
 8000d38:	1aca      	subs	r2, r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fb02 f303 	mul.w	r3, r2, r3
 8000d42:	60fb      	str	r3, [r7, #12]
 8000d44:	e77f      	b.n	8000c46 <main+0x2e>
		  }
	  } else {
		  previous_time = HAL_GetTick();
 8000d46:	f000 fbaf 	bl	80014a8 <HAL_GetTick>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	607b      	str	r3, [r7, #4]
		  delay_in_ms = 1000 * (rand() % 6);
 8000d4e:	f001 ff77 	bl	8002c40 <rand>
 8000d52:	4601      	mov	r1, r0
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <main+0x170>)
 8000d56:	fb83 3201 	smull	r3, r2, r3, r1
 8000d5a:	17cb      	asrs	r3, r1, #31
 8000d5c:	1ad2      	subs	r2, r2, r3
 8000d5e:	4613      	mov	r3, r2
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	4413      	add	r3, r2
 8000d64:	005b      	lsls	r3, r3, #1
 8000d66:	1aca      	subs	r2, r1, r3
 8000d68:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d6c:	fb02 f303 	mul.w	r3, r2, r3
 8000d70:	60fb      	str	r3, [r7, #12]
		  game_running = true;
 8000d72:	2301      	movs	r3, #1
 8000d74:	70fb      	strb	r3, [r7, #3]
	  if (flag)
 8000d76:	e766      	b.n	8000c46 <main+0x2e>
 8000d78:	9999999a 	.word	0x9999999a
 8000d7c:	3fe99999 	.word	0x3fe99999
 8000d80:	447a0000 	.word	0x447a0000
 8000d84:	200000cc 	.word	0x200000cc
 8000d88:	2aaaaaab 	.word	0x2aaaaaab

08000d8c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b094      	sub	sp, #80	; 0x50
 8000d90:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d92:	f107 031c 	add.w	r3, r7, #28
 8000d96:	2234      	movs	r2, #52	; 0x34
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f002 f893 	bl	8002ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da0:	f107 0308 	add.w	r3, r7, #8
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db0:	2300      	movs	r3, #0
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	4b2a      	ldr	r3, [pc, #168]	; (8000e60 <SystemClock_Config+0xd4>)
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	4a29      	ldr	r2, [pc, #164]	; (8000e60 <SystemClock_Config+0xd4>)
 8000dba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc0:	4b27      	ldr	r3, [pc, #156]	; (8000e60 <SystemClock_Config+0xd4>)
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc8:	607b      	str	r3, [r7, #4]
 8000dca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <SystemClock_Config+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dd8:	4a22      	ldr	r2, [pc, #136]	; (8000e64 <SystemClock_Config+0xd8>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b20      	ldr	r3, [pc, #128]	; (8000e64 <SystemClock_Config+0xd8>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de8:	603b      	str	r3, [r7, #0]
 8000dea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dec:	2302      	movs	r3, #2
 8000dee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000df0:	2301      	movs	r3, #1
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000df4:	2310      	movs	r3, #16
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e00:	2310      	movs	r3, #16
 8000e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e04:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e08:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e0a:	2304      	movs	r3, #4
 8000e0c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000e12:	2302      	movs	r3, #2
 8000e14:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f001 f9ae 	bl	800217c <HAL_RCC_OscConfig>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e26:	f000 f92f 	bl	8001088 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2a:	230f      	movs	r3, #15
 8000e2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e32:	2300      	movs	r3, #0
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e40:	f107 0308 	add.w	r3, r7, #8
 8000e44:	2102      	movs	r1, #2
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fe4e 	bl	8001ae8 <HAL_RCC_ClockConfig>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000e52:	f000 f919 	bl	8001088 <Error_Handler>
  }
}
 8000e56:	bf00      	nop
 8000e58:	3750      	adds	r7, #80	; 0x50
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40007000 	.word	0x40007000

08000e68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	4a12      	ldr	r2, [pc, #72]	; (8000eb8 <MX_USART2_UART_Init+0x50>)
 8000e70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e7a:	4b0e      	ldr	r3, [pc, #56]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e86:	4b0b      	ldr	r3, [pc, #44]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e8e:	220c      	movs	r2, #12
 8000e90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e92:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e9e:	4805      	ldr	r0, [pc, #20]	; (8000eb4 <MX_USART2_UART_Init+0x4c>)
 8000ea0:	f001 fc0a 	bl	80026b8 <HAL_UART_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000eaa:	f000 f8ed 	bl	8001088 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000084 	.word	0x20000084
 8000eb8:	40004400 	.word	0x40004400

08000ebc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f48:	f000 fd9c 	bl	8001a84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f52:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	f107 0314 	add.w	r3, r7, #20
 8000f60:	4619      	mov	r1, r3
 8000f62:	4810      	ldr	r0, [pc, #64]	; (8000fa4 <MX_GPIO_Init+0xe8>)
 8000f64:	f000 fbe2 	bl	800172c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f68:	2320      	movs	r3, #32
 8000f6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f74:	2300      	movs	r3, #0
 8000f76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f107 0314 	add.w	r3, r7, #20
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f80:	f000 fbd4 	bl	800172c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f84:	2200      	movs	r2, #0
 8000f86:	2100      	movs	r1, #0
 8000f88:	2028      	movs	r0, #40	; 0x28
 8000f8a:	f000 fb98 	bl	80016be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8e:	2028      	movs	r0, #40	; 0x28
 8000f90:	f000 fbb1 	bl	80016f6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	; 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	40020800 	.word	0x40020800

08000fa8 <LED_ON>:

/* USER CODE BEGIN 4 */

static void LED_ON(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fac:	2201      	movs	r2, #1
 8000fae:	2120      	movs	r1, #32
 8000fb0:	4802      	ldr	r0, [pc, #8]	; (8000fbc <LED_ON+0x14>)
 8000fb2:	f000 fd67 	bl	8001a84 <HAL_GPIO_WritePin>
}
 8000fb6:	bf00      	nop
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40020000 	.word	0x40020000

08000fc0 <LED_OFF>:

static void LED_OFF(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2120      	movs	r1, #32
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <LED_OFF+0x14>)
 8000fca:	f000 fd5b 	bl	8001a84 <HAL_GPIO_WritePin>
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40020000 	.word	0x40020000

08000fd8 <IS_LED_ON>:

static bool IS_LED_ON(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000fdc:	2120      	movs	r1, #32
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <IS_LED_ON+0x1c>)
 8000fe0:	f000 fd38 	bl	8001a54 <HAL_GPIO_ReadPin>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf14      	ite	ne
 8000fea:	2301      	movne	r3, #1
 8000fec:	2300      	moveq	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	40020000 	.word	0x40020000

08000ff8 <LED_WIN_SQUENCE>:
//{
//	flag = true;
//}

static void LED_WIN_SQUENCE(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i <= 10; i++){
 8000ffe:	2300      	movs	r3, #0
 8001000:	71fb      	strb	r3, [r7, #7]
 8001002:	e00c      	b.n	800101e <LED_WIN_SQUENCE+0x26>
		LED_ON();
 8001004:	f7ff ffd0 	bl	8000fa8 <LED_ON>
		HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f000 fa59 	bl	80014c0 <HAL_Delay>
		LED_OFF();
 800100e:	f7ff ffd7 	bl	8000fc0 <LED_OFF>
		HAL_Delay(100);
 8001012:	2064      	movs	r0, #100	; 0x64
 8001014:	f000 fa54 	bl	80014c0 <HAL_Delay>
	for (uint8_t i=0; i <= 10; i++){
 8001018:	79fb      	ldrb	r3, [r7, #7]
 800101a:	3301      	adds	r3, #1
 800101c:	71fb      	strb	r3, [r7, #7]
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	2b0a      	cmp	r3, #10
 8001022:	d9ef      	bls.n	8001004 <LED_WIN_SQUENCE+0xc>
	}
}
 8001024:	bf00      	nop
 8001026:	bf00      	nop
 8001028:	3708      	adds	r7, #8
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <LED_LOSS_SQUENCE>:

static void LED_LOSS_SQUENCE(void)
{
 800102e:	b580      	push	{r7, lr}
 8001030:	b082      	sub	sp, #8
 8001032:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i <= 10; i++){
 8001034:	2300      	movs	r3, #0
 8001036:	71fb      	strb	r3, [r7, #7]
 8001038:	e00d      	b.n	8001056 <LED_LOSS_SQUENCE+0x28>
		LED_ON();
 800103a:	f7ff ffb5 	bl	8000fa8 <LED_ON>
		HAL_Delay(100);
 800103e:	2064      	movs	r0, #100	; 0x64
 8001040:	f000 fa3e 	bl	80014c0 <HAL_Delay>
		LED_OFF();
 8001044:	f7ff ffbc 	bl	8000fc0 <LED_OFF>
		HAL_Delay(300);
 8001048:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800104c:	f000 fa38 	bl	80014c0 <HAL_Delay>
	for (uint8_t i=0; i <= 10; i++){
 8001050:	79fb      	ldrb	r3, [r7, #7]
 8001052:	3301      	adds	r3, #1
 8001054:	71fb      	strb	r3, [r7, #7]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	2b0a      	cmp	r3, #10
 800105a:	d9ee      	bls.n	800103a <LED_LOSS_SQUENCE+0xc>
	}
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	3708      	adds	r7, #8
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	4603      	mov	r3, r0
 8001070:	80fb      	strh	r3, [r7, #6]
	flag = true;
 8001072:	4b04      	ldr	r3, [pc, #16]	; (8001084 <HAL_GPIO_EXTI_Callback+0x1c>)
 8001074:	2201      	movs	r2, #1
 8001076:	701a      	strb	r2, [r3, #0]
}
 8001078:	bf00      	nop
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr
 8001084:	200000cc 	.word	0x200000cc

08001088 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800108c:	b672      	cpsid	i
}
 800108e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001090:	e7fe      	b.n	8001090 <Error_Handler+0x8>
	...

08001094 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a2:	4a0f      	ldr	r2, [pc, #60]	; (80010e0 <HAL_MspInit+0x4c>)
 80010a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a8:	6453      	str	r3, [r2, #68]	; 0x44
 80010aa:	4b0d      	ldr	r3, [pc, #52]	; (80010e0 <HAL_MspInit+0x4c>)
 80010ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_MspInit+0x4c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_MspInit+0x4c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80010d2:	2007      	movs	r0, #7
 80010d4:	f000 fae8 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b08a      	sub	sp, #40	; 0x28
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 0314 	add.w	r3, r7, #20
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	4a19      	ldr	r2, [pc, #100]	; (8001168 <HAL_UART_MspInit+0x84>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d12b      	bne.n	800115e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	613b      	str	r3, [r7, #16]
 800110a:	4b18      	ldr	r3, [pc, #96]	; (800116c <HAL_UART_MspInit+0x88>)
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	4a17      	ldr	r2, [pc, #92]	; (800116c <HAL_UART_MspInit+0x88>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001114:	6413      	str	r3, [r2, #64]	; 0x40
 8001116:	4b15      	ldr	r3, [pc, #84]	; (800116c <HAL_UART_MspInit+0x88>)
 8001118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	2300      	movs	r3, #0
 8001124:	60fb      	str	r3, [r7, #12]
 8001126:	4b11      	ldr	r3, [pc, #68]	; (800116c <HAL_UART_MspInit+0x88>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	4a10      	ldr	r2, [pc, #64]	; (800116c <HAL_UART_MspInit+0x88>)
 800112c:	f043 0301 	orr.w	r3, r3, #1
 8001130:	6313      	str	r3, [r2, #48]	; 0x30
 8001132:	4b0e      	ldr	r3, [pc, #56]	; (800116c <HAL_UART_MspInit+0x88>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	f003 0301 	and.w	r3, r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800113e:	230c      	movs	r3, #12
 8001140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001142:	2302      	movs	r3, #2
 8001144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001146:	2300      	movs	r3, #0
 8001148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114e:	2307      	movs	r3, #7
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	4619      	mov	r1, r3
 8001158:	4805      	ldr	r0, [pc, #20]	; (8001170 <HAL_UART_MspInit+0x8c>)
 800115a:	f000 fae7 	bl	800172c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800115e:	bf00      	nop
 8001160:	3728      	adds	r7, #40	; 0x28
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40004400 	.word	0x40004400
 800116c:	40023800 	.word	0x40023800
 8001170:	40020000 	.word	0x40020000

08001174 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001178:	e7fe      	b.n	8001178 <NMI_Handler+0x4>

0800117a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800117e:	e7fe      	b.n	800117e <HardFault_Handler+0x4>

08001180 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001184:	e7fe      	b.n	8001184 <MemManage_Handler+0x4>

08001186 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001186:	b480      	push	{r7}
 8001188:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800118a:	e7fe      	b.n	800118a <BusFault_Handler+0x4>

0800118c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001190:	e7fe      	b.n	8001190 <UsageFault_Handler+0x4>

08001192 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001192:	b480      	push	{r7}
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011c0:	f000 f95e 	bl	8001480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011c4:	bf00      	nop
 80011c6:	bd80      	pop	{r7, pc}

080011c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d0:	f000 fc72 	bl	8001ab8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  return 1;
 80011dc:	2301      	movs	r3, #1
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr

080011e8 <_kill>:

int _kill(int pid, int sig)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011f2:	f001 feb7 	bl	8002f64 <__errno>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2216      	movs	r2, #22
 80011fa:	601a      	str	r2, [r3, #0]
  return -1;
 80011fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001200:	4618      	mov	r0, r3
 8001202:	3708      	adds	r7, #8
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}

08001208 <_exit>:

void _exit (int status)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001210:	f04f 31ff 	mov.w	r1, #4294967295
 8001214:	6878      	ldr	r0, [r7, #4]
 8001216:	f7ff ffe7 	bl	80011e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800121a:	e7fe      	b.n	800121a <_exit+0x12>

0800121c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b086      	sub	sp, #24
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	e00a      	b.n	8001244 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800122e:	f3af 8000 	nop.w
 8001232:	4601      	mov	r1, r0
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	1c5a      	adds	r2, r3, #1
 8001238:	60ba      	str	r2, [r7, #8]
 800123a:	b2ca      	uxtb	r2, r1
 800123c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf0      	blt.n	800122e <_read+0x12>
  }

  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	2300      	movs	r3, #0
 8001264:	617b      	str	r3, [r7, #20]
 8001266:	e009      	b.n	800127c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	1c5a      	adds	r2, r3, #1
 800126c:	60ba      	str	r2, [r7, #8]
 800126e:	781b      	ldrb	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697a      	ldr	r2, [r7, #20]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	429a      	cmp	r2, r3
 8001282:	dbf1      	blt.n	8001268 <_write+0x12>
  }
  return len;
 8001284:	687b      	ldr	r3, [r7, #4]
}
 8001286:	4618      	mov	r0, r3
 8001288:	3718      	adds	r7, #24
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <_close>:

int _close(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001296:	f04f 33ff 	mov.w	r3, #4294967295
}
 800129a:	4618      	mov	r0, r3
 800129c:	370c      	adds	r7, #12
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012a6:	b480      	push	{r7}
 80012a8:	b083      	sub	sp, #12
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
 80012ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012b6:	605a      	str	r2, [r3, #4]
  return 0;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	370c      	adds	r7, #12
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr

080012c6 <_isatty>:

int _isatty(int file)
{
 80012c6:	b480      	push	{r7}
 80012c8:	b083      	sub	sp, #12
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012ce:	2301      	movs	r3, #1
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	370c      	adds	r7, #12
 80012d4:	46bd      	mov	sp, r7
 80012d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012da:	4770      	bx	lr

080012dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	60b9      	str	r1, [r7, #8]
 80012e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	3714      	adds	r7, #20
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
	...

080012f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001300:	4a14      	ldr	r2, [pc, #80]	; (8001354 <_sbrk+0x5c>)
 8001302:	4b15      	ldr	r3, [pc, #84]	; (8001358 <_sbrk+0x60>)
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800130c:	4b13      	ldr	r3, [pc, #76]	; (800135c <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d102      	bne.n	800131a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001314:	4b11      	ldr	r3, [pc, #68]	; (800135c <_sbrk+0x64>)
 8001316:	4a12      	ldr	r2, [pc, #72]	; (8001360 <_sbrk+0x68>)
 8001318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800131a:	4b10      	ldr	r3, [pc, #64]	; (800135c <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	429a      	cmp	r2, r3
 8001326:	d207      	bcs.n	8001338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001328:	f001 fe1c 	bl	8002f64 <__errno>
 800132c:	4603      	mov	r3, r0
 800132e:	220c      	movs	r2, #12
 8001330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e009      	b.n	800134c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001338:	4b08      	ldr	r3, [pc, #32]	; (800135c <_sbrk+0x64>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800133e:	4b07      	ldr	r3, [pc, #28]	; (800135c <_sbrk+0x64>)
 8001340:	681a      	ldr	r2, [r3, #0]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4413      	add	r3, r2
 8001346:	4a05      	ldr	r2, [pc, #20]	; (800135c <_sbrk+0x64>)
 8001348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800134a:	68fb      	ldr	r3, [r7, #12]
}
 800134c:	4618      	mov	r0, r3
 800134e:	3718      	adds	r7, #24
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20020000 	.word	0x20020000
 8001358:	00000400 	.word	0x00000400
 800135c:	200000d0 	.word	0x200000d0
 8001360:	20000228 	.word	0x20000228

08001364 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001368:	4b06      	ldr	r3, [pc, #24]	; (8001384 <SystemInit+0x20>)
 800136a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800136e:	4a05      	ldr	r2, [pc, #20]	; (8001384 <SystemInit+0x20>)
 8001370:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001374:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800138c:	f7ff ffea 	bl	8001364 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001392:	490d      	ldr	r1, [pc, #52]	; (80013c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001396:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001398:	e002      	b.n	80013a0 <LoopCopyDataInit>

0800139a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800139a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800139c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800139e:	3304      	adds	r3, #4

080013a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013a4:	d3f9      	bcc.n	800139a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013a6:	4a0a      	ldr	r2, [pc, #40]	; (80013d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80013a8:	4c0a      	ldr	r4, [pc, #40]	; (80013d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80013aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013ac:	e001      	b.n	80013b2 <LoopFillZerobss>

080013ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013b0:	3204      	adds	r2, #4

080013b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013b4:	d3fb      	bcc.n	80013ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80013b6:	f001 fddb 	bl	8002f70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ba:	f7ff fc2d 	bl	8000c18 <main>
  bx  lr    
 80013be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013c8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80013cc:	08003d2c 	.word	0x08003d2c
  ldr r2, =_sbss
 80013d0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80013d4:	20000224 	.word	0x20000224

080013d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013d8:	e7fe      	b.n	80013d8 <ADC_IRQHandler>
	...

080013dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013e0:	4b0e      	ldr	r3, [pc, #56]	; (800141c <HAL_Init+0x40>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a0d      	ldr	r2, [pc, #52]	; (800141c <HAL_Init+0x40>)
 80013e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ec:	4b0b      	ldr	r3, [pc, #44]	; (800141c <HAL_Init+0x40>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a0a      	ldr	r2, [pc, #40]	; (800141c <HAL_Init+0x40>)
 80013f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013f8:	4b08      	ldr	r3, [pc, #32]	; (800141c <HAL_Init+0x40>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a07      	ldr	r2, [pc, #28]	; (800141c <HAL_Init+0x40>)
 80013fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001404:	2003      	movs	r0, #3
 8001406:	f000 f94f 	bl	80016a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800140a:	2000      	movs	r0, #0
 800140c:	f000 f808 	bl	8001420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001410:	f7ff fe40 	bl	8001094 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	40023c00 	.word	0x40023c00

08001420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001428:	4b12      	ldr	r3, [pc, #72]	; (8001474 <HAL_InitTick+0x54>)
 800142a:	681a      	ldr	r2, [r3, #0]
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_InitTick+0x58>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	4619      	mov	r1, r3
 8001432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001436:	fbb3 f3f1 	udiv	r3, r3, r1
 800143a:	fbb2 f3f3 	udiv	r3, r2, r3
 800143e:	4618      	mov	r0, r3
 8001440:	f000 f967 	bl	8001712 <HAL_SYSTICK_Config>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800144a:	2301      	movs	r3, #1
 800144c:	e00e      	b.n	800146c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2b0f      	cmp	r3, #15
 8001452:	d80a      	bhi.n	800146a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001454:	2200      	movs	r2, #0
 8001456:	6879      	ldr	r1, [r7, #4]
 8001458:	f04f 30ff 	mov.w	r0, #4294967295
 800145c:	f000 f92f 	bl	80016be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001460:	4a06      	ldr	r2, [pc, #24]	; (800147c <HAL_InitTick+0x5c>)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001466:	2300      	movs	r3, #0
 8001468:	e000      	b.n	800146c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	20000000 	.word	0x20000000
 8001478:	20000008 	.word	0x20000008
 800147c:	20000004 	.word	0x20000004

08001480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <HAL_IncTick+0x20>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	461a      	mov	r2, r3
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x24>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4413      	add	r3, r2
 8001490:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <HAL_IncTick+0x24>)
 8001492:	6013      	str	r3, [r2, #0]
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	20000008 	.word	0x20000008
 80014a4:	200000d4 	.word	0x200000d4

080014a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return uwTick;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <HAL_GetTick+0x14>)
 80014ae:	681b      	ldr	r3, [r3, #0]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	200000d4 	.word	0x200000d4

080014c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c8:	f7ff ffee 	bl	80014a8 <HAL_GetTick>
 80014cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d8:	d005      	beq.n	80014e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014da:	4b0a      	ldr	r3, [pc, #40]	; (8001504 <HAL_Delay+0x44>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	461a      	mov	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	4413      	add	r3, r2
 80014e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014e6:	bf00      	nop
 80014e8:	f7ff ffde 	bl	80014a8 <HAL_GetTick>
 80014ec:	4602      	mov	r2, r0
 80014ee:	68bb      	ldr	r3, [r7, #8]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	68fa      	ldr	r2, [r7, #12]
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d8f7      	bhi.n	80014e8 <HAL_Delay+0x28>
  {
  }
}
 80014f8:	bf00      	nop
 80014fa:	bf00      	nop
 80014fc:	3710      	adds	r7, #16
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000008 	.word	0x20000008

08001508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f003 0307 	and.w	r3, r3, #7
 8001516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001518:	4b0c      	ldr	r3, [pc, #48]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800151a:	68db      	ldr	r3, [r3, #12]
 800151c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800151e:	68ba      	ldr	r2, [r7, #8]
 8001520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001524:	4013      	ands	r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800153a:	4a04      	ldr	r2, [pc, #16]	; (800154c <__NVIC_SetPriorityGrouping+0x44>)
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	60d3      	str	r3, [r2, #12]
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000ed00 	.word	0xe000ed00

08001550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001550:	b480      	push	{r7}
 8001552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001554:	4b04      	ldr	r3, [pc, #16]	; (8001568 <__NVIC_GetPriorityGrouping+0x18>)
 8001556:	68db      	ldr	r3, [r3, #12]
 8001558:	0a1b      	lsrs	r3, r3, #8
 800155a:	f003 0307 	and.w	r3, r3, #7
}
 800155e:	4618      	mov	r0, r3
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr
 8001568:	e000ed00 	.word	0xe000ed00

0800156c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	4603      	mov	r3, r0
 8001574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800157a:	2b00      	cmp	r3, #0
 800157c:	db0b      	blt.n	8001596 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	f003 021f 	and.w	r2, r3, #31
 8001584:	4907      	ldr	r1, [pc, #28]	; (80015a4 <__NVIC_EnableIRQ+0x38>)
 8001586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	2001      	movs	r0, #1
 800158e:	fa00 f202 	lsl.w	r2, r0, r2
 8001592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
 80015a2:	bf00      	nop
 80015a4:	e000e100 	.word	0xe000e100

080015a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b083      	sub	sp, #12
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	6039      	str	r1, [r7, #0]
 80015b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	db0a      	blt.n	80015d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	b2da      	uxtb	r2, r3
 80015c0:	490c      	ldr	r1, [pc, #48]	; (80015f4 <__NVIC_SetPriority+0x4c>)
 80015c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c6:	0112      	lsls	r2, r2, #4
 80015c8:	b2d2      	uxtb	r2, r2
 80015ca:	440b      	add	r3, r1
 80015cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015d0:	e00a      	b.n	80015e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	b2da      	uxtb	r2, r3
 80015d6:	4908      	ldr	r1, [pc, #32]	; (80015f8 <__NVIC_SetPriority+0x50>)
 80015d8:	79fb      	ldrb	r3, [r7, #7]
 80015da:	f003 030f 	and.w	r3, r3, #15
 80015de:	3b04      	subs	r3, #4
 80015e0:	0112      	lsls	r2, r2, #4
 80015e2:	b2d2      	uxtb	r2, r2
 80015e4:	440b      	add	r3, r1
 80015e6:	761a      	strb	r2, [r3, #24]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	e000e100 	.word	0xe000e100
 80015f8:	e000ed00 	.word	0xe000ed00

080015fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b089      	sub	sp, #36	; 0x24
 8001600:	af00      	add	r7, sp, #0
 8001602:	60f8      	str	r0, [r7, #12]
 8001604:	60b9      	str	r1, [r7, #8]
 8001606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f003 0307 	and.w	r3, r3, #7
 800160e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001610:	69fb      	ldr	r3, [r7, #28]
 8001612:	f1c3 0307 	rsb	r3, r3, #7
 8001616:	2b04      	cmp	r3, #4
 8001618:	bf28      	it	cs
 800161a:	2304      	movcs	r3, #4
 800161c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3304      	adds	r3, #4
 8001622:	2b06      	cmp	r3, #6
 8001624:	d902      	bls.n	800162c <NVIC_EncodePriority+0x30>
 8001626:	69fb      	ldr	r3, [r7, #28]
 8001628:	3b03      	subs	r3, #3
 800162a:	e000      	b.n	800162e <NVIC_EncodePriority+0x32>
 800162c:	2300      	movs	r3, #0
 800162e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	f04f 32ff 	mov.w	r2, #4294967295
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	68bb      	ldr	r3, [r7, #8]
 800163e:	401a      	ands	r2, r3
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001644:	f04f 31ff 	mov.w	r1, #4294967295
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	fa01 f303 	lsl.w	r3, r1, r3
 800164e:	43d9      	mvns	r1, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001654:	4313      	orrs	r3, r2
         );
}
 8001656:	4618      	mov	r0, r3
 8001658:	3724      	adds	r7, #36	; 0x24
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	3b01      	subs	r3, #1
 8001670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001674:	d301      	bcc.n	800167a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001676:	2301      	movs	r3, #1
 8001678:	e00f      	b.n	800169a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <SysTick_Config+0x40>)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	3b01      	subs	r3, #1
 8001680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001682:	210f      	movs	r1, #15
 8001684:	f04f 30ff 	mov.w	r0, #4294967295
 8001688:	f7ff ff8e 	bl	80015a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800168c:	4b05      	ldr	r3, [pc, #20]	; (80016a4 <SysTick_Config+0x40>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001692:	4b04      	ldr	r3, [pc, #16]	; (80016a4 <SysTick_Config+0x40>)
 8001694:	2207      	movs	r2, #7
 8001696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001698:	2300      	movs	r3, #0
}
 800169a:	4618      	mov	r0, r3
 800169c:	3708      	adds	r7, #8
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	e000e010 	.word	0xe000e010

080016a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016b0:	6878      	ldr	r0, [r7, #4]
 80016b2:	f7ff ff29 	bl	8001508 <__NVIC_SetPriorityGrouping>
}
 80016b6:	bf00      	nop
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016be:	b580      	push	{r7, lr}
 80016c0:	b086      	sub	sp, #24
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	60b9      	str	r1, [r7, #8]
 80016c8:	607a      	str	r2, [r7, #4]
 80016ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016cc:	2300      	movs	r3, #0
 80016ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016d0:	f7ff ff3e 	bl	8001550 <__NVIC_GetPriorityGrouping>
 80016d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	68b9      	ldr	r1, [r7, #8]
 80016da:	6978      	ldr	r0, [r7, #20]
 80016dc:	f7ff ff8e 	bl	80015fc <NVIC_EncodePriority>
 80016e0:	4602      	mov	r2, r0
 80016e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016e6:	4611      	mov	r1, r2
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff5d 	bl	80015a8 <__NVIC_SetPriority>
}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}

080016f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016f6:	b580      	push	{r7, lr}
 80016f8:	b082      	sub	sp, #8
 80016fa:	af00      	add	r7, sp, #0
 80016fc:	4603      	mov	r3, r0
 80016fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001704:	4618      	mov	r0, r3
 8001706:	f7ff ff31 	bl	800156c <__NVIC_EnableIRQ>
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}

08001712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001712:	b580      	push	{r7, lr}
 8001714:	b082      	sub	sp, #8
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800171a:	6878      	ldr	r0, [r7, #4]
 800171c:	f7ff ffa2 	bl	8001664 <SysTick_Config>
 8001720:	4603      	mov	r3, r0
}
 8001722:	4618      	mov	r0, r3
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
	...

0800172c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800172c:	b480      	push	{r7}
 800172e:	b089      	sub	sp, #36	; 0x24
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800173a:	2300      	movs	r3, #0
 800173c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800173e:	2300      	movs	r3, #0
 8001740:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
 8001746:	e165      	b.n	8001a14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001748:	2201      	movs	r2, #1
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	4013      	ands	r3, r2
 800175a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800175c:	693a      	ldr	r2, [r7, #16]
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	429a      	cmp	r2, r3
 8001762:	f040 8154 	bne.w	8001a0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b01      	cmp	r3, #1
 8001770:	d005      	beq.n	800177e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800177a:	2b02      	cmp	r3, #2
 800177c:	d130      	bne.n	80017e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	4013      	ands	r3, r2
 8001794:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	68da      	ldr	r2, [r3, #12]
 800179a:	69fb      	ldr	r3, [r7, #28]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017b4:	2201      	movs	r2, #1
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43db      	mvns	r3, r3
 80017be:	69ba      	ldr	r2, [r7, #24]
 80017c0:	4013      	ands	r3, r2
 80017c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	091b      	lsrs	r3, r3, #4
 80017ca:	f003 0201 	and.w	r2, r3, #1
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	69ba      	ldr	r2, [r7, #24]
 80017de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 0303 	and.w	r3, r3, #3
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	2203      	movs	r2, #3
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4013      	ands	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	689a      	ldr	r2, [r3, #8]
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69ba      	ldr	r2, [r7, #24]
 800181a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d123      	bne.n	8001870 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001828:	69fb      	ldr	r3, [r7, #28]
 800182a:	08da      	lsrs	r2, r3, #3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3208      	adds	r2, #8
 8001830:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001834:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001836:	69fb      	ldr	r3, [r7, #28]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	220f      	movs	r2, #15
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43db      	mvns	r3, r3
 8001846:	69ba      	ldr	r2, [r7, #24]
 8001848:	4013      	ands	r3, r2
 800184a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	691a      	ldr	r2, [r3, #16]
 8001850:	69fb      	ldr	r3, [r7, #28]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	69ba      	ldr	r2, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	08da      	lsrs	r2, r3, #3
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	3208      	adds	r2, #8
 800186a:	69b9      	ldr	r1, [r7, #24]
 800186c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	2203      	movs	r2, #3
 800187c:	fa02 f303 	lsl.w	r3, r2, r3
 8001880:	43db      	mvns	r3, r3
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	4013      	ands	r3, r2
 8001886:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f003 0203 	and.w	r2, r3, #3
 8001890:	69fb      	ldr	r3, [r7, #28]
 8001892:	005b      	lsls	r3, r3, #1
 8001894:	fa02 f303 	lsl.w	r3, r2, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4313      	orrs	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	f000 80ae 	beq.w	8001a0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b5d      	ldr	r3, [pc, #372]	; (8001a2c <HAL_GPIO_Init+0x300>)
 80018b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ba:	4a5c      	ldr	r2, [pc, #368]	; (8001a2c <HAL_GPIO_Init+0x300>)
 80018bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c0:	6453      	str	r3, [r2, #68]	; 0x44
 80018c2:	4b5a      	ldr	r3, [pc, #360]	; (8001a2c <HAL_GPIO_Init+0x300>)
 80018c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018ce:	4a58      	ldr	r2, [pc, #352]	; (8001a30 <HAL_GPIO_Init+0x304>)
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	089b      	lsrs	r3, r3, #2
 80018d4:	3302      	adds	r3, #2
 80018d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	f003 0303 	and.w	r3, r3, #3
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	220f      	movs	r2, #15
 80018e6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ea:	43db      	mvns	r3, r3
 80018ec:	69ba      	ldr	r2, [r7, #24]
 80018ee:	4013      	ands	r3, r2
 80018f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a4f      	ldr	r2, [pc, #316]	; (8001a34 <HAL_GPIO_Init+0x308>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d025      	beq.n	8001946 <HAL_GPIO_Init+0x21a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a4e      	ldr	r2, [pc, #312]	; (8001a38 <HAL_GPIO_Init+0x30c>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d01f      	beq.n	8001942 <HAL_GPIO_Init+0x216>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a4d      	ldr	r2, [pc, #308]	; (8001a3c <HAL_GPIO_Init+0x310>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d019      	beq.n	800193e <HAL_GPIO_Init+0x212>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a4c      	ldr	r2, [pc, #304]	; (8001a40 <HAL_GPIO_Init+0x314>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d013      	beq.n	800193a <HAL_GPIO_Init+0x20e>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4a4b      	ldr	r2, [pc, #300]	; (8001a44 <HAL_GPIO_Init+0x318>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d00d      	beq.n	8001936 <HAL_GPIO_Init+0x20a>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a4a      	ldr	r2, [pc, #296]	; (8001a48 <HAL_GPIO_Init+0x31c>)
 800191e:	4293      	cmp	r3, r2
 8001920:	d007      	beq.n	8001932 <HAL_GPIO_Init+0x206>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a49      	ldr	r2, [pc, #292]	; (8001a4c <HAL_GPIO_Init+0x320>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d101      	bne.n	800192e <HAL_GPIO_Init+0x202>
 800192a:	2306      	movs	r3, #6
 800192c:	e00c      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800192e:	2307      	movs	r3, #7
 8001930:	e00a      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001932:	2305      	movs	r3, #5
 8001934:	e008      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001936:	2304      	movs	r3, #4
 8001938:	e006      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800193a:	2303      	movs	r3, #3
 800193c:	e004      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 800193e:	2302      	movs	r3, #2
 8001940:	e002      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001942:	2301      	movs	r3, #1
 8001944:	e000      	b.n	8001948 <HAL_GPIO_Init+0x21c>
 8001946:	2300      	movs	r3, #0
 8001948:	69fa      	ldr	r2, [r7, #28]
 800194a:	f002 0203 	and.w	r2, r2, #3
 800194e:	0092      	lsls	r2, r2, #2
 8001950:	4093      	lsls	r3, r2
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	4313      	orrs	r3, r2
 8001956:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001958:	4935      	ldr	r1, [pc, #212]	; (8001a30 <HAL_GPIO_Init+0x304>)
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	089b      	lsrs	r3, r3, #2
 800195e:	3302      	adds	r3, #2
 8001960:	69ba      	ldr	r2, [r7, #24]
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001966:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <HAL_GPIO_Init+0x324>)
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	43db      	mvns	r3, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4013      	ands	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800197e:	2b00      	cmp	r3, #0
 8001980:	d003      	beq.n	800198a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	4313      	orrs	r3, r2
 8001988:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800198a:	4a31      	ldr	r2, [pc, #196]	; (8001a50 <HAL_GPIO_Init+0x324>)
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001990:	4b2f      	ldr	r3, [pc, #188]	; (8001a50 <HAL_GPIO_Init+0x324>)
 8001992:	68db      	ldr	r3, [r3, #12]
 8001994:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	43db      	mvns	r3, r3
 800199a:	69ba      	ldr	r2, [r7, #24]
 800199c:	4013      	ands	r3, r2
 800199e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d003      	beq.n	80019b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	693b      	ldr	r3, [r7, #16]
 80019b0:	4313      	orrs	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019b4:	4a26      	ldr	r2, [pc, #152]	; (8001a50 <HAL_GPIO_Init+0x324>)
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019ba:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <HAL_GPIO_Init+0x324>)
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	43db      	mvns	r3, r3
 80019c4:	69ba      	ldr	r2, [r7, #24]
 80019c6:	4013      	ands	r3, r2
 80019c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d003      	beq.n	80019de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	4313      	orrs	r3, r2
 80019dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <HAL_GPIO_Init+0x324>)
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e4:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <HAL_GPIO_Init+0x324>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	43db      	mvns	r3, r3
 80019ee:	69ba      	ldr	r2, [r7, #24]
 80019f0:	4013      	ands	r3, r2
 80019f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a08:	4a11      	ldr	r2, [pc, #68]	; (8001a50 <HAL_GPIO_Init+0x324>)
 8001a0a:	69bb      	ldr	r3, [r7, #24]
 8001a0c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3301      	adds	r3, #1
 8001a12:	61fb      	str	r3, [r7, #28]
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	2b0f      	cmp	r3, #15
 8001a18:	f67f ae96 	bls.w	8001748 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a1c:	bf00      	nop
 8001a1e:	bf00      	nop
 8001a20:	3724      	adds	r7, #36	; 0x24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	40023800 	.word	0x40023800
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40020000 	.word	0x40020000
 8001a38:	40020400 	.word	0x40020400
 8001a3c:	40020800 	.word	0x40020800
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40021400 	.word	0x40021400
 8001a4c:	40021800 	.word	0x40021800
 8001a50:	40013c00 	.word	0x40013c00

08001a54 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b085      	sub	sp, #20
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	691a      	ldr	r2, [r3, #16]
 8001a64:	887b      	ldrh	r3, [r7, #2]
 8001a66:	4013      	ands	r3, r2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d002      	beq.n	8001a72 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	73fb      	strb	r3, [r7, #15]
 8001a70:	e001      	b.n	8001a76 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a72:	2300      	movs	r3, #0
 8001a74:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	3714      	adds	r7, #20
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	807b      	strh	r3, [r7, #2]
 8001a90:	4613      	mov	r3, r2
 8001a92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a94:	787b      	ldrb	r3, [r7, #1]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a9a:	887a      	ldrh	r2, [r7, #2]
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aa0:	e003      	b.n	8001aaa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aa2:	887b      	ldrh	r3, [r7, #2]
 8001aa4:	041a      	lsls	r2, r3, #16
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	619a      	str	r2, [r3, #24]
}
 8001aaa:	bf00      	nop
 8001aac:	370c      	adds	r7, #12
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
	...

08001ab8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ac2:	4b08      	ldr	r3, [pc, #32]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ac4:	695a      	ldr	r2, [r3, #20]
 8001ac6:	88fb      	ldrh	r3, [r7, #6]
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d006      	beq.n	8001adc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ace:	4a05      	ldr	r2, [pc, #20]	; (8001ae4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ad0:	88fb      	ldrh	r3, [r7, #6]
 8001ad2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ad4:	88fb      	ldrh	r3, [r7, #6]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff fac6 	bl	8001068 <HAL_GPIO_EXTI_Callback>
  }
}
 8001adc:	bf00      	nop
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40013c00 	.word	0x40013c00

08001ae8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d101      	bne.n	8001afc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001af8:	2301      	movs	r3, #1
 8001afa:	e0cc      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001afc:	4b68      	ldr	r3, [pc, #416]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d90c      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b0a:	4b65      	ldr	r3, [pc, #404]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b12:	4b63      	ldr	r3, [pc, #396]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	683a      	ldr	r2, [r7, #0]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d001      	beq.n	8001b24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e0b8      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0302 	and.w	r3, r3, #2
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d020      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0304 	and.w	r3, r3, #4
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b3c:	4b59      	ldr	r3, [pc, #356]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	4a58      	ldr	r2, [pc, #352]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b54:	4b53      	ldr	r3, [pc, #332]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	4a52      	ldr	r2, [pc, #328]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b60:	4b50      	ldr	r3, [pc, #320]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	494d      	ldr	r1, [pc, #308]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d044      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b01      	cmp	r3, #1
 8001b84:	d107      	bne.n	8001b96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b86:	4b47      	ldr	r3, [pc, #284]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d119      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b92:	2301      	movs	r3, #1
 8001b94:	e07f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d003      	beq.n	8001ba6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ba2:	2b03      	cmp	r3, #3
 8001ba4:	d107      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d109      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb6:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e067      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f023 0203 	bic.w	r2, r3, #3
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	4934      	ldr	r1, [pc, #208]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bd8:	f7ff fc66 	bl	80014a8 <HAL_GetTick>
 8001bdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bde:	e00a      	b.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001be0:	f7ff fc62 	bl	80014a8 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04f      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 020c 	and.w	r2, r3, #12
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	009b      	lsls	r3, r3, #2
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d1eb      	bne.n	8001be0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c08:	4b25      	ldr	r3, [pc, #148]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	683a      	ldr	r2, [r7, #0]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d20c      	bcs.n	8001c30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c16:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c18:	683a      	ldr	r2, [r7, #0]
 8001c1a:	b2d2      	uxtb	r2, r2
 8001c1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c1e:	4b20      	ldr	r3, [pc, #128]	; (8001ca0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d001      	beq.n	8001c30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e032      	b.n	8001c96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d008      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3c:	4b19      	ldr	r3, [pc, #100]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	68db      	ldr	r3, [r3, #12]
 8001c48:	4916      	ldr	r1, [pc, #88]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0308 	and.w	r3, r3, #8
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d009      	beq.n	8001c6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5a:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	00db      	lsls	r3, r3, #3
 8001c68:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c6e:	f000 f855 	bl	8001d1c <HAL_RCC_GetSysClockFreq>
 8001c72:	4602      	mov	r2, r0
 8001c74:	4b0b      	ldr	r3, [pc, #44]	; (8001ca4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c76:	689b      	ldr	r3, [r3, #8]
 8001c78:	091b      	lsrs	r3, r3, #4
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	490a      	ldr	r1, [pc, #40]	; (8001ca8 <HAL_RCC_ClockConfig+0x1c0>)
 8001c80:	5ccb      	ldrb	r3, [r1, r3]
 8001c82:	fa22 f303 	lsr.w	r3, r2, r3
 8001c86:	4a09      	ldr	r2, [pc, #36]	; (8001cac <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001c8a:	4b09      	ldr	r3, [pc, #36]	; (8001cb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fbc6 	bl	8001420 <HAL_InitTick>

  return HAL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00
 8001ca4:	40023800 	.word	0x40023800
 8001ca8:	08003c24 	.word	0x08003c24
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	20000004 	.word	0x20000004

08001cb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb8:	4b03      	ldr	r3, [pc, #12]	; (8001cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cba:	681b      	ldr	r3, [r3, #0]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	20000000 	.word	0x20000000

08001ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cd0:	f7ff fff0 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cd4:	4602      	mov	r2, r0
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	0a9b      	lsrs	r3, r3, #10
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	4903      	ldr	r1, [pc, #12]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ce2:	5ccb      	ldrb	r3, [r1, r3]
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40023800 	.word	0x40023800
 8001cf0:	08003c34 	.word	0x08003c34

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001cf8:	f7ff ffdc 	bl	8001cb4 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0b5b      	lsrs	r3, r3, #13
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4903      	ldr	r1, [pc, #12]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40023800 	.word	0x40023800
 8001d18:	08003c34 	.word	0x08003c34

08001d1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d20:	b0ae      	sub	sp, #184	; 0xb8
 8001d22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d24:	2300      	movs	r3, #0
 8001d26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001d30:	2300      	movs	r3, #0
 8001d32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d42:	4bcb      	ldr	r3, [pc, #812]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	f003 030c 	and.w	r3, r3, #12
 8001d4a:	2b0c      	cmp	r3, #12
 8001d4c:	f200 8206 	bhi.w	800215c <HAL_RCC_GetSysClockFreq+0x440>
 8001d50:	a201      	add	r2, pc, #4	; (adr r2, 8001d58 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d56:	bf00      	nop
 8001d58:	08001d8d 	.word	0x08001d8d
 8001d5c:	0800215d 	.word	0x0800215d
 8001d60:	0800215d 	.word	0x0800215d
 8001d64:	0800215d 	.word	0x0800215d
 8001d68:	08001d95 	.word	0x08001d95
 8001d6c:	0800215d 	.word	0x0800215d
 8001d70:	0800215d 	.word	0x0800215d
 8001d74:	0800215d 	.word	0x0800215d
 8001d78:	08001d9d 	.word	0x08001d9d
 8001d7c:	0800215d 	.word	0x0800215d
 8001d80:	0800215d 	.word	0x0800215d
 8001d84:	0800215d 	.word	0x0800215d
 8001d88:	08001f8d 	.word	0x08001f8d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d8c:	4bb9      	ldr	r3, [pc, #740]	; (8002074 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001d92:	e1e7      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001d94:	4bb8      	ldr	r3, [pc, #736]	; (8002078 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001d9a:	e1e3      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001d9c:	4bb4      	ldr	r3, [pc, #720]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001da4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001da8:	4bb1      	ldr	r3, [pc, #708]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d071      	beq.n	8001e98 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001db4:	4bae      	ldr	r3, [pc, #696]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	099b      	lsrs	r3, r3, #6
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001dc0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001dc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001dc8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001dcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001dd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001dda:	4622      	mov	r2, r4
 8001ddc:	462b      	mov	r3, r5
 8001dde:	f04f 0000 	mov.w	r0, #0
 8001de2:	f04f 0100 	mov.w	r1, #0
 8001de6:	0159      	lsls	r1, r3, #5
 8001de8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001dec:	0150      	lsls	r0, r2, #5
 8001dee:	4602      	mov	r2, r0
 8001df0:	460b      	mov	r3, r1
 8001df2:	4621      	mov	r1, r4
 8001df4:	1a51      	subs	r1, r2, r1
 8001df6:	6439      	str	r1, [r7, #64]	; 0x40
 8001df8:	4629      	mov	r1, r5
 8001dfa:	eb63 0301 	sbc.w	r3, r3, r1
 8001dfe:	647b      	str	r3, [r7, #68]	; 0x44
 8001e00:	f04f 0200 	mov.w	r2, #0
 8001e04:	f04f 0300 	mov.w	r3, #0
 8001e08:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8001e0c:	4649      	mov	r1, r9
 8001e0e:	018b      	lsls	r3, r1, #6
 8001e10:	4641      	mov	r1, r8
 8001e12:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001e16:	4641      	mov	r1, r8
 8001e18:	018a      	lsls	r2, r1, #6
 8001e1a:	4641      	mov	r1, r8
 8001e1c:	1a51      	subs	r1, r2, r1
 8001e1e:	63b9      	str	r1, [r7, #56]	; 0x38
 8001e20:	4649      	mov	r1, r9
 8001e22:	eb63 0301 	sbc.w	r3, r3, r1
 8001e26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e28:	f04f 0200 	mov.w	r2, #0
 8001e2c:	f04f 0300 	mov.w	r3, #0
 8001e30:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001e34:	4649      	mov	r1, r9
 8001e36:	00cb      	lsls	r3, r1, #3
 8001e38:	4641      	mov	r1, r8
 8001e3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001e3e:	4641      	mov	r1, r8
 8001e40:	00ca      	lsls	r2, r1, #3
 8001e42:	4610      	mov	r0, r2
 8001e44:	4619      	mov	r1, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	4622      	mov	r2, r4
 8001e4a:	189b      	adds	r3, r3, r2
 8001e4c:	633b      	str	r3, [r7, #48]	; 0x30
 8001e4e:	462b      	mov	r3, r5
 8001e50:	460a      	mov	r2, r1
 8001e52:	eb42 0303 	adc.w	r3, r2, r3
 8001e56:	637b      	str	r3, [r7, #52]	; 0x34
 8001e58:	f04f 0200 	mov.w	r2, #0
 8001e5c:	f04f 0300 	mov.w	r3, #0
 8001e60:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001e64:	4629      	mov	r1, r5
 8001e66:	024b      	lsls	r3, r1, #9
 8001e68:	4621      	mov	r1, r4
 8001e6a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001e6e:	4621      	mov	r1, r4
 8001e70:	024a      	lsls	r2, r1, #9
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001e84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001e88:	f7fe fd48 	bl	800091c <__aeabi_uldivmod>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	460b      	mov	r3, r1
 8001e90:	4613      	mov	r3, r2
 8001e92:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001e96:	e067      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e98:	4b75      	ldr	r3, [pc, #468]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	099b      	lsrs	r3, r3, #6
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001ea4:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001ea8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001eac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001eb0:	67bb      	str	r3, [r7, #120]	; 0x78
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001eb6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001eba:	4622      	mov	r2, r4
 8001ebc:	462b      	mov	r3, r5
 8001ebe:	f04f 0000 	mov.w	r0, #0
 8001ec2:	f04f 0100 	mov.w	r1, #0
 8001ec6:	0159      	lsls	r1, r3, #5
 8001ec8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001ecc:	0150      	lsls	r0, r2, #5
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4621      	mov	r1, r4
 8001ed4:	1a51      	subs	r1, r2, r1
 8001ed6:	62b9      	str	r1, [r7, #40]	; 0x28
 8001ed8:	4629      	mov	r1, r5
 8001eda:	eb63 0301 	sbc.w	r3, r3, r1
 8001ede:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	f04f 0300 	mov.w	r3, #0
 8001ee8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001eec:	4649      	mov	r1, r9
 8001eee:	018b      	lsls	r3, r1, #6
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ef6:	4641      	mov	r1, r8
 8001ef8:	018a      	lsls	r2, r1, #6
 8001efa:	4641      	mov	r1, r8
 8001efc:	ebb2 0a01 	subs.w	sl, r2, r1
 8001f00:	4649      	mov	r1, r9
 8001f02:	eb63 0b01 	sbc.w	fp, r3, r1
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f12:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f1a:	4692      	mov	sl, r2
 8001f1c:	469b      	mov	fp, r3
 8001f1e:	4623      	mov	r3, r4
 8001f20:	eb1a 0303 	adds.w	r3, sl, r3
 8001f24:	623b      	str	r3, [r7, #32]
 8001f26:	462b      	mov	r3, r5
 8001f28:	eb4b 0303 	adc.w	r3, fp, r3
 8001f2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f2e:	f04f 0200 	mov.w	r2, #0
 8001f32:	f04f 0300 	mov.w	r3, #0
 8001f36:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001f3a:	4629      	mov	r1, r5
 8001f3c:	028b      	lsls	r3, r1, #10
 8001f3e:	4621      	mov	r1, r4
 8001f40:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f44:	4621      	mov	r1, r4
 8001f46:	028a      	lsls	r2, r1, #10
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f50:	2200      	movs	r2, #0
 8001f52:	673b      	str	r3, [r7, #112]	; 0x70
 8001f54:	677a      	str	r2, [r7, #116]	; 0x74
 8001f56:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001f5a:	f7fe fcdf 	bl	800091c <__aeabi_uldivmod>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	460b      	mov	r3, r1
 8001f62:	4613      	mov	r3, r2
 8001f64:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f68:	4b41      	ldr	r3, [pc, #260]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	0c1b      	lsrs	r3, r3, #16
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	3301      	adds	r3, #1
 8001f74:	005b      	lsls	r3, r3, #1
 8001f76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001f7a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001f7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001f8a:	e0eb      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f8c:	4b38      	ldr	r3, [pc, #224]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f94:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f98:	4b35      	ldr	r3, [pc, #212]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d06b      	beq.n	800207c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fa4:	4b32      	ldr	r3, [pc, #200]	; (8002070 <HAL_RCC_GetSysClockFreq+0x354>)
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	099b      	lsrs	r3, r3, #6
 8001faa:	2200      	movs	r2, #0
 8001fac:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fae:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001fb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fb6:	663b      	str	r3, [r7, #96]	; 0x60
 8001fb8:	2300      	movs	r3, #0
 8001fba:	667b      	str	r3, [r7, #100]	; 0x64
 8001fbc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001fc0:	4622      	mov	r2, r4
 8001fc2:	462b      	mov	r3, r5
 8001fc4:	f04f 0000 	mov.w	r0, #0
 8001fc8:	f04f 0100 	mov.w	r1, #0
 8001fcc:	0159      	lsls	r1, r3, #5
 8001fce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fd2:	0150      	lsls	r0, r2, #5
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	460b      	mov	r3, r1
 8001fd8:	4621      	mov	r1, r4
 8001fda:	1a51      	subs	r1, r2, r1
 8001fdc:	61b9      	str	r1, [r7, #24]
 8001fde:	4629      	mov	r1, r5
 8001fe0:	eb63 0301 	sbc.w	r3, r3, r1
 8001fe4:	61fb      	str	r3, [r7, #28]
 8001fe6:	f04f 0200 	mov.w	r2, #0
 8001fea:	f04f 0300 	mov.w	r3, #0
 8001fee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001ff2:	4659      	mov	r1, fp
 8001ff4:	018b      	lsls	r3, r1, #6
 8001ff6:	4651      	mov	r1, sl
 8001ff8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ffc:	4651      	mov	r1, sl
 8001ffe:	018a      	lsls	r2, r1, #6
 8002000:	4651      	mov	r1, sl
 8002002:	ebb2 0801 	subs.w	r8, r2, r1
 8002006:	4659      	mov	r1, fp
 8002008:	eb63 0901 	sbc.w	r9, r3, r1
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002018:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800201c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002020:	4690      	mov	r8, r2
 8002022:	4699      	mov	r9, r3
 8002024:	4623      	mov	r3, r4
 8002026:	eb18 0303 	adds.w	r3, r8, r3
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	462b      	mov	r3, r5
 800202e:	eb49 0303 	adc.w	r3, r9, r3
 8002032:	617b      	str	r3, [r7, #20]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002040:	4629      	mov	r1, r5
 8002042:	024b      	lsls	r3, r1, #9
 8002044:	4621      	mov	r1, r4
 8002046:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800204a:	4621      	mov	r1, r4
 800204c:	024a      	lsls	r2, r1, #9
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002056:	2200      	movs	r2, #0
 8002058:	65bb      	str	r3, [r7, #88]	; 0x58
 800205a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800205c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002060:	f7fe fc5c 	bl	800091c <__aeabi_uldivmod>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	4613      	mov	r3, r2
 800206a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800206e:	e065      	b.n	800213c <HAL_RCC_GetSysClockFreq+0x420>
 8002070:	40023800 	.word	0x40023800
 8002074:	00f42400 	.word	0x00f42400
 8002078:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800207c:	4b3d      	ldr	r3, [pc, #244]	; (8002174 <HAL_RCC_GetSysClockFreq+0x458>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	099b      	lsrs	r3, r3, #6
 8002082:	2200      	movs	r2, #0
 8002084:	4618      	mov	r0, r3
 8002086:	4611      	mov	r1, r2
 8002088:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800208c:	653b      	str	r3, [r7, #80]	; 0x50
 800208e:	2300      	movs	r3, #0
 8002090:	657b      	str	r3, [r7, #84]	; 0x54
 8002092:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002096:	4642      	mov	r2, r8
 8002098:	464b      	mov	r3, r9
 800209a:	f04f 0000 	mov.w	r0, #0
 800209e:	f04f 0100 	mov.w	r1, #0
 80020a2:	0159      	lsls	r1, r3, #5
 80020a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020a8:	0150      	lsls	r0, r2, #5
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4641      	mov	r1, r8
 80020b0:	1a51      	subs	r1, r2, r1
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	4649      	mov	r1, r9
 80020b6:	eb63 0301 	sbc.w	r3, r3, r1
 80020ba:	60fb      	str	r3, [r7, #12]
 80020bc:	f04f 0200 	mov.w	r2, #0
 80020c0:	f04f 0300 	mov.w	r3, #0
 80020c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80020c8:	4659      	mov	r1, fp
 80020ca:	018b      	lsls	r3, r1, #6
 80020cc:	4651      	mov	r1, sl
 80020ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020d2:	4651      	mov	r1, sl
 80020d4:	018a      	lsls	r2, r1, #6
 80020d6:	4651      	mov	r1, sl
 80020d8:	1a54      	subs	r4, r2, r1
 80020da:	4659      	mov	r1, fp
 80020dc:	eb63 0501 	sbc.w	r5, r3, r1
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	00eb      	lsls	r3, r5, #3
 80020ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020ee:	00e2      	lsls	r2, r4, #3
 80020f0:	4614      	mov	r4, r2
 80020f2:	461d      	mov	r5, r3
 80020f4:	4643      	mov	r3, r8
 80020f6:	18e3      	adds	r3, r4, r3
 80020f8:	603b      	str	r3, [r7, #0]
 80020fa:	464b      	mov	r3, r9
 80020fc:	eb45 0303 	adc.w	r3, r5, r3
 8002100:	607b      	str	r3, [r7, #4]
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800210e:	4629      	mov	r1, r5
 8002110:	028b      	lsls	r3, r1, #10
 8002112:	4621      	mov	r1, r4
 8002114:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002118:	4621      	mov	r1, r4
 800211a:	028a      	lsls	r2, r1, #10
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002124:	2200      	movs	r2, #0
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
 8002128:	64fa      	str	r2, [r7, #76]	; 0x4c
 800212a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800212e:	f7fe fbf5 	bl	800091c <__aeabi_uldivmod>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4613      	mov	r3, r2
 8002138:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800213c:	4b0d      	ldr	r3, [pc, #52]	; (8002174 <HAL_RCC_GetSysClockFreq+0x458>)
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	0f1b      	lsrs	r3, r3, #28
 8002142:	f003 0307 	and.w	r3, r3, #7
 8002146:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800214a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800214e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002152:	fbb2 f3f3 	udiv	r3, r2, r3
 8002156:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800215a:	e003      	b.n	8002164 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800215c:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_GetSysClockFreq+0x45c>)
 800215e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002162:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002164:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002168:	4618      	mov	r0, r3
 800216a:	37b8      	adds	r7, #184	; 0xb8
 800216c:	46bd      	mov	sp, r7
 800216e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002172:	bf00      	nop
 8002174:	40023800 	.word	0x40023800
 8002178:	00f42400 	.word	0x00f42400

0800217c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b086      	sub	sp, #24
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d101      	bne.n	800218e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e28d      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 8083 	beq.w	80022a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800219c:	4b94      	ldr	r3, [pc, #592]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 030c 	and.w	r3, r3, #12
 80021a4:	2b04      	cmp	r3, #4
 80021a6:	d019      	beq.n	80021dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021a8:	4b91      	ldr	r3, [pc, #580]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021b0:	2b08      	cmp	r3, #8
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021b4:	4b8e      	ldr	r3, [pc, #568]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021c0:	d00c      	beq.n	80021dc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021c2:	4b8b      	ldr	r3, [pc, #556]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80021c4:	689b      	ldr	r3, [r3, #8]
 80021c6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021ca:	2b0c      	cmp	r3, #12
 80021cc:	d112      	bne.n	80021f4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ce:	4b88      	ldr	r3, [pc, #544]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021da:	d10b      	bne.n	80021f4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d05b      	beq.n	80022a0 <HAL_RCC_OscConfig+0x124>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	685b      	ldr	r3, [r3, #4]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d157      	bne.n	80022a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e25a      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021fc:	d106      	bne.n	800220c <HAL_RCC_OscConfig+0x90>
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7b      	ldr	r2, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xcc>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0xb4>
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xcc>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7ff f92a 	bl	80014a8 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002258:	f7ff f926 	bl	80014a8 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e21f      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xdc>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7ff f916 	bl	80014a8 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002280:	f7ff f912 	bl	80014a8 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e20b      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x104>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d06f      	beq.n	800238e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022ae:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d017      	beq.n	80022ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d105      	bne.n	80022d2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022da:	2b0c      	cmp	r3, #12
 80022dc:	d11c      	bne.n	8002318 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022de:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d116      	bne.n	8002318 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0302 	and.w	r3, r3, #2
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d005      	beq.n	8002302 <HAL_RCC_OscConfig+0x186>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d001      	beq.n	8002302 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80022fe:	2301      	movs	r3, #1
 8002300:	e1d3      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002302:	4b3b      	ldr	r3, [pc, #236]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	691b      	ldr	r3, [r3, #16]
 800230e:	00db      	lsls	r3, r3, #3
 8002310:	4937      	ldr	r1, [pc, #220]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002316:	e03a      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d020      	beq.n	8002362 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002320:	4b34      	ldr	r3, [pc, #208]	; (80023f4 <HAL_RCC_OscConfig+0x278>)
 8002322:	2201      	movs	r2, #1
 8002324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002326:	f7ff f8bf 	bl	80014a8 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800232e:	f7ff f8bb 	bl	80014a8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1b4      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002340:	4b2b      	ldr	r3, [pc, #172]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f0      	beq.n	800232e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800234c:	4b28      	ldr	r3, [pc, #160]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	691b      	ldr	r3, [r3, #16]
 8002358:	00db      	lsls	r3, r3, #3
 800235a:	4925      	ldr	r1, [pc, #148]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 800235c:	4313      	orrs	r3, r2
 800235e:	600b      	str	r3, [r1, #0]
 8002360:	e015      	b.n	800238e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002362:	4b24      	ldr	r3, [pc, #144]	; (80023f4 <HAL_RCC_OscConfig+0x278>)
 8002364:	2200      	movs	r2, #0
 8002366:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f89e 	bl	80014a8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002370:	f7ff f89a 	bl	80014a8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e193      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f0      	bne.n	8002370 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0308 	and.w	r3, r3, #8
 8002396:	2b00      	cmp	r3, #0
 8002398:	d036      	beq.n	8002408 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	695b      	ldr	r3, [r3, #20]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d016      	beq.n	80023d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023a2:	4b15      	ldr	r3, [pc, #84]	; (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80023a4:	2201      	movs	r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a8:	f7ff f87e 	bl	80014a8 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023b0:	f7ff f87a 	bl	80014a8 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e173      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023c2:	4b0b      	ldr	r3, [pc, #44]	; (80023f0 <HAL_RCC_OscConfig+0x274>)
 80023c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d0f0      	beq.n	80023b0 <HAL_RCC_OscConfig+0x234>
 80023ce:	e01b      	b.n	8002408 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023d0:	4b09      	ldr	r3, [pc, #36]	; (80023f8 <HAL_RCC_OscConfig+0x27c>)
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff f867 	bl	80014a8 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	e00e      	b.n	80023fc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023de:	f7ff f863 	bl	80014a8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d907      	bls.n	80023fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e15c      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
 80023f0:	40023800 	.word	0x40023800
 80023f4:	42470000 	.word	0x42470000
 80023f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023fc:	4b8a      	ldr	r3, [pc, #552]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80023fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d1ea      	bne.n	80023de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	f000 8097 	beq.w	8002544 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002416:	2300      	movs	r3, #0
 8002418:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800241a:	4b83      	ldr	r3, [pc, #524]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]
 800242a:	4b7f      	ldr	r3, [pc, #508]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 800242c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242e:	4a7e      	ldr	r2, [pc, #504]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002434:	6413      	str	r3, [r2, #64]	; 0x40
 8002436:	4b7c      	ldr	r3, [pc, #496]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800243e:	60bb      	str	r3, [r7, #8]
 8002440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002442:	2301      	movs	r3, #1
 8002444:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002446:	4b79      	ldr	r3, [pc, #484]	; (800262c <HAL_RCC_OscConfig+0x4b0>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800244e:	2b00      	cmp	r3, #0
 8002450:	d118      	bne.n	8002484 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002452:	4b76      	ldr	r3, [pc, #472]	; (800262c <HAL_RCC_OscConfig+0x4b0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a75      	ldr	r2, [pc, #468]	; (800262c <HAL_RCC_OscConfig+0x4b0>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800245c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800245e:	f7ff f823 	bl	80014a8 <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002466:	f7ff f81f 	bl	80014a8 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e118      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002478:	4b6c      	ldr	r3, [pc, #432]	; (800262c <HAL_RCC_OscConfig+0x4b0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d106      	bne.n	800249a <HAL_RCC_OscConfig+0x31e>
 800248c:	4b66      	ldr	r3, [pc, #408]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 800248e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002490:	4a65      	ldr	r2, [pc, #404]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002492:	f043 0301 	orr.w	r3, r3, #1
 8002496:	6713      	str	r3, [r2, #112]	; 0x70
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x358>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d10c      	bne.n	80024bc <HAL_RCC_OscConfig+0x340>
 80024a2:	4b61      	ldr	r3, [pc, #388]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a6:	4a60      	ldr	r2, [pc, #384]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6713      	str	r3, [r2, #112]	; 0x70
 80024ae:	4b5e      	ldr	r3, [pc, #376]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b2:	4a5d      	ldr	r2, [pc, #372]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ba:	e00b      	b.n	80024d4 <HAL_RCC_OscConfig+0x358>
 80024bc:	4b5a      	ldr	r3, [pc, #360]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c0:	4a59      	ldr	r2, [pc, #356]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024c2:	f023 0301 	bic.w	r3, r3, #1
 80024c6:	6713      	str	r3, [r2, #112]	; 0x70
 80024c8:	4b57      	ldr	r3, [pc, #348]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a56      	ldr	r2, [pc, #344]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024ce:	f023 0304 	bic.w	r3, r3, #4
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d015      	beq.n	8002508 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024dc:	f7fe ffe4 	bl	80014a8 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024e2:	e00a      	b.n	80024fa <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024e4:	f7fe ffe0 	bl	80014a8 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e0d7      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024fa:	4b4b      	ldr	r3, [pc, #300]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0ee      	beq.n	80024e4 <HAL_RCC_OscConfig+0x368>
 8002506:	e014      	b.n	8002532 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002508:	f7fe ffce 	bl	80014a8 <HAL_GetTick>
 800250c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800250e:	e00a      	b.n	8002526 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002510:	f7fe ffca 	bl	80014a8 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e0c1      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002526:	4b40      	ldr	r3, [pc, #256]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ee      	bne.n	8002510 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 800253a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253c:	4a3a      	ldr	r2, [pc, #232]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 800253e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002542:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 80ad 	beq.w	80026a8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002550:	689b      	ldr	r3, [r3, #8]
 8002552:	f003 030c 	and.w	r3, r3, #12
 8002556:	2b08      	cmp	r3, #8
 8002558:	d060      	beq.n	800261c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b02      	cmp	r3, #2
 8002560:	d145      	bne.n	80025ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002562:	4b33      	ldr	r3, [pc, #204]	; (8002630 <HAL_RCC_OscConfig+0x4b4>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002568:	f7fe ff9e 	bl	80014a8 <HAL_GetTick>
 800256c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800256e:	e008      	b.n	8002582 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002570:	f7fe ff9a 	bl	80014a8 <HAL_GetTick>
 8002574:	4602      	mov	r2, r0
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	1ad3      	subs	r3, r2, r3
 800257a:	2b02      	cmp	r3, #2
 800257c:	d901      	bls.n	8002582 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800257e:	2303      	movs	r3, #3
 8002580:	e093      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002582:	4b29      	ldr	r3, [pc, #164]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d1f0      	bne.n	8002570 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69da      	ldr	r2, [r3, #28]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6a1b      	ldr	r3, [r3, #32]
 8002596:	431a      	orrs	r2, r3
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800259c:	019b      	lsls	r3, r3, #6
 800259e:	431a      	orrs	r2, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a4:	085b      	lsrs	r3, r3, #1
 80025a6:	3b01      	subs	r3, #1
 80025a8:	041b      	lsls	r3, r3, #16
 80025aa:	431a      	orrs	r2, r3
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b0:	061b      	lsls	r3, r3, #24
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b8:	071b      	lsls	r3, r3, #28
 80025ba:	491b      	ldr	r1, [pc, #108]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c0:	4b1b      	ldr	r3, [pc, #108]	; (8002630 <HAL_RCC_OscConfig+0x4b4>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c6:	f7fe ff6f 	bl	80014a8 <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025cc:	e008      	b.n	80025e0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ce:	f7fe ff6b 	bl	80014a8 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d901      	bls.n	80025e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e064      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025e0:	4b11      	ldr	r3, [pc, #68]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d0f0      	beq.n	80025ce <HAL_RCC_OscConfig+0x452>
 80025ec:	e05c      	b.n	80026a8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ee:	4b10      	ldr	r3, [pc, #64]	; (8002630 <HAL_RCC_OscConfig+0x4b4>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe ff58 	bl	80014a8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025fc:	f7fe ff54 	bl	80014a8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e04d      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	4b06      	ldr	r3, [pc, #24]	; (8002628 <HAL_RCC_OscConfig+0x4ac>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d1f0      	bne.n	80025fc <HAL_RCC_OscConfig+0x480>
 800261a:	e045      	b.n	80026a8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	2b01      	cmp	r3, #1
 8002622:	d107      	bne.n	8002634 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e040      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
 8002628:	40023800 	.word	0x40023800
 800262c:	40007000 	.word	0x40007000
 8002630:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002634:	4b1f      	ldr	r3, [pc, #124]	; (80026b4 <HAL_RCC_OscConfig+0x538>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	699b      	ldr	r3, [r3, #24]
 800263e:	2b01      	cmp	r3, #1
 8002640:	d030      	beq.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d129      	bne.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	429a      	cmp	r2, r3
 800265c:	d122      	bne.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800265e:	68fa      	ldr	r2, [r7, #12]
 8002660:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002664:	4013      	ands	r3, r2
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800266a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800266c:	4293      	cmp	r3, r2
 800266e:	d119      	bne.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	085b      	lsrs	r3, r3, #1
 800267c:	3b01      	subs	r3, #1
 800267e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002680:	429a      	cmp	r2, r3
 8002682:	d10f      	bne.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002690:	429a      	cmp	r2, r3
 8002692:	d107      	bne.n	80026a4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d001      	beq.n	80026a8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e000      	b.n	80026aa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3718      	adds	r7, #24
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023800 	.word	0x40023800

080026b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d101      	bne.n	80026ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	e042      	b.n	8002750 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026d0:	b2db      	uxtb	r3, r3
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d106      	bne.n	80026e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f7fe fd00 	bl	80010e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2224      	movs	r2, #36	; 0x24
 80026e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68da      	ldr	r2, [r3, #12]
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 f82b 	bl	8002758 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	691a      	ldr	r2, [r3, #16]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002710:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695a      	ldr	r2, [r3, #20]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002720:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	68da      	ldr	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002730:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2220      	movs	r2, #32
 8002744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3708      	adds	r7, #8
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}

08002758 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002758:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800275c:	b0c0      	sub	sp, #256	; 0x100
 800275e:	af00      	add	r7, sp, #0
 8002760:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	691b      	ldr	r3, [r3, #16]
 800276c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002774:	68d9      	ldr	r1, [r3, #12]
 8002776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	ea40 0301 	orr.w	r3, r0, r1
 8002780:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800278c:	691b      	ldr	r3, [r3, #16]
 800278e:	431a      	orrs	r2, r3
 8002790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002794:	695b      	ldr	r3, [r3, #20]
 8002796:	431a      	orrs	r2, r3
 8002798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800279c:	69db      	ldr	r3, [r3, #28]
 800279e:	4313      	orrs	r3, r2
 80027a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80027a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80027b0:	f021 010c 	bic.w	r1, r1, #12
 80027b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80027be:	430b      	orrs	r3, r1
 80027c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80027c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	695b      	ldr	r3, [r3, #20]
 80027ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80027ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d2:	6999      	ldr	r1, [r3, #24]
 80027d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027d8:	681a      	ldr	r2, [r3, #0]
 80027da:	ea40 0301 	orr.w	r3, r0, r1
 80027de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80027e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4b8f      	ldr	r3, [pc, #572]	; (8002a24 <UART_SetConfig+0x2cc>)
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d005      	beq.n	80027f8 <UART_SetConfig+0xa0>
 80027ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80027f0:	681a      	ldr	r2, [r3, #0]
 80027f2:	4b8d      	ldr	r3, [pc, #564]	; (8002a28 <UART_SetConfig+0x2d0>)
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d104      	bne.n	8002802 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80027f8:	f7ff fa7c 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 80027fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8002800:	e003      	b.n	800280a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002802:	f7ff fa63 	bl	8001ccc <HAL_RCC_GetPCLK1Freq>
 8002806:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800280a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002814:	f040 810c 	bne.w	8002a30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002818:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800281c:	2200      	movs	r2, #0
 800281e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002822:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002826:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800282a:	4622      	mov	r2, r4
 800282c:	462b      	mov	r3, r5
 800282e:	1891      	adds	r1, r2, r2
 8002830:	65b9      	str	r1, [r7, #88]	; 0x58
 8002832:	415b      	adcs	r3, r3
 8002834:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002836:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800283a:	4621      	mov	r1, r4
 800283c:	eb12 0801 	adds.w	r8, r2, r1
 8002840:	4629      	mov	r1, r5
 8002842:	eb43 0901 	adc.w	r9, r3, r1
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	f04f 0300 	mov.w	r3, #0
 800284e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002852:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002856:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800285a:	4690      	mov	r8, r2
 800285c:	4699      	mov	r9, r3
 800285e:	4623      	mov	r3, r4
 8002860:	eb18 0303 	adds.w	r3, r8, r3
 8002864:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002868:	462b      	mov	r3, r5
 800286a:	eb49 0303 	adc.w	r3, r9, r3
 800286e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002872:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800287e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8002882:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002886:	460b      	mov	r3, r1
 8002888:	18db      	adds	r3, r3, r3
 800288a:	653b      	str	r3, [r7, #80]	; 0x50
 800288c:	4613      	mov	r3, r2
 800288e:	eb42 0303 	adc.w	r3, r2, r3
 8002892:	657b      	str	r3, [r7, #84]	; 0x54
 8002894:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002898:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800289c:	f7fe f83e 	bl	800091c <__aeabi_uldivmod>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4b61      	ldr	r3, [pc, #388]	; (8002a2c <UART_SetConfig+0x2d4>)
 80028a6:	fba3 2302 	umull	r2, r3, r3, r2
 80028aa:	095b      	lsrs	r3, r3, #5
 80028ac:	011c      	lsls	r4, r3, #4
 80028ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80028b2:	2200      	movs	r2, #0
 80028b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80028b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80028bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80028c0:	4642      	mov	r2, r8
 80028c2:	464b      	mov	r3, r9
 80028c4:	1891      	adds	r1, r2, r2
 80028c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80028c8:	415b      	adcs	r3, r3
 80028ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80028cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80028d0:	4641      	mov	r1, r8
 80028d2:	eb12 0a01 	adds.w	sl, r2, r1
 80028d6:	4649      	mov	r1, r9
 80028d8:	eb43 0b01 	adc.w	fp, r3, r1
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028f0:	4692      	mov	sl, r2
 80028f2:	469b      	mov	fp, r3
 80028f4:	4643      	mov	r3, r8
 80028f6:	eb1a 0303 	adds.w	r3, sl, r3
 80028fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80028fe:	464b      	mov	r3, r9
 8002900:	eb4b 0303 	adc.w	r3, fp, r3
 8002904:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002908:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	2200      	movs	r2, #0
 8002910:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002914:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002918:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800291c:	460b      	mov	r3, r1
 800291e:	18db      	adds	r3, r3, r3
 8002920:	643b      	str	r3, [r7, #64]	; 0x40
 8002922:	4613      	mov	r3, r2
 8002924:	eb42 0303 	adc.w	r3, r2, r3
 8002928:	647b      	str	r3, [r7, #68]	; 0x44
 800292a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800292e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8002932:	f7fd fff3 	bl	800091c <__aeabi_uldivmod>
 8002936:	4602      	mov	r2, r0
 8002938:	460b      	mov	r3, r1
 800293a:	4611      	mov	r1, r2
 800293c:	4b3b      	ldr	r3, [pc, #236]	; (8002a2c <UART_SetConfig+0x2d4>)
 800293e:	fba3 2301 	umull	r2, r3, r3, r1
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2264      	movs	r2, #100	; 0x64
 8002946:	fb02 f303 	mul.w	r3, r2, r3
 800294a:	1acb      	subs	r3, r1, r3
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8002952:	4b36      	ldr	r3, [pc, #216]	; (8002a2c <UART_SetConfig+0x2d4>)
 8002954:	fba3 2302 	umull	r2, r3, r3, r2
 8002958:	095b      	lsrs	r3, r3, #5
 800295a:	005b      	lsls	r3, r3, #1
 800295c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002960:	441c      	add	r4, r3
 8002962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002966:	2200      	movs	r2, #0
 8002968:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800296c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8002970:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002974:	4642      	mov	r2, r8
 8002976:	464b      	mov	r3, r9
 8002978:	1891      	adds	r1, r2, r2
 800297a:	63b9      	str	r1, [r7, #56]	; 0x38
 800297c:	415b      	adcs	r3, r3
 800297e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002980:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002984:	4641      	mov	r1, r8
 8002986:	1851      	adds	r1, r2, r1
 8002988:	6339      	str	r1, [r7, #48]	; 0x30
 800298a:	4649      	mov	r1, r9
 800298c:	414b      	adcs	r3, r1
 800298e:	637b      	str	r3, [r7, #52]	; 0x34
 8002990:	f04f 0200 	mov.w	r2, #0
 8002994:	f04f 0300 	mov.w	r3, #0
 8002998:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800299c:	4659      	mov	r1, fp
 800299e:	00cb      	lsls	r3, r1, #3
 80029a0:	4651      	mov	r1, sl
 80029a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80029a6:	4651      	mov	r1, sl
 80029a8:	00ca      	lsls	r2, r1, #3
 80029aa:	4610      	mov	r0, r2
 80029ac:	4619      	mov	r1, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	4642      	mov	r2, r8
 80029b2:	189b      	adds	r3, r3, r2
 80029b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029b8:	464b      	mov	r3, r9
 80029ba:	460a      	mov	r2, r1
 80029bc:	eb42 0303 	adc.w	r3, r2, r3
 80029c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	2200      	movs	r2, #0
 80029cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80029d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80029d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80029d8:	460b      	mov	r3, r1
 80029da:	18db      	adds	r3, r3, r3
 80029dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029de:	4613      	mov	r3, r2
 80029e0:	eb42 0303 	adc.w	r3, r2, r3
 80029e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80029ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80029ee:	f7fd ff95 	bl	800091c <__aeabi_uldivmod>
 80029f2:	4602      	mov	r2, r0
 80029f4:	460b      	mov	r3, r1
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <UART_SetConfig+0x2d4>)
 80029f8:	fba3 1302 	umull	r1, r3, r3, r2
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	2164      	movs	r1, #100	; 0x64
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	00db      	lsls	r3, r3, #3
 8002a08:	3332      	adds	r3, #50	; 0x32
 8002a0a:	4a08      	ldr	r2, [pc, #32]	; (8002a2c <UART_SetConfig+0x2d4>)
 8002a0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a10:	095b      	lsrs	r3, r3, #5
 8002a12:	f003 0207 	and.w	r2, r3, #7
 8002a16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4422      	add	r2, r4
 8002a1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002a20:	e106      	b.n	8002c30 <UART_SetConfig+0x4d8>
 8002a22:	bf00      	nop
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a34:	2200      	movs	r2, #0
 8002a36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a3a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002a3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002a42:	4642      	mov	r2, r8
 8002a44:	464b      	mov	r3, r9
 8002a46:	1891      	adds	r1, r2, r2
 8002a48:	6239      	str	r1, [r7, #32]
 8002a4a:	415b      	adcs	r3, r3
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8002a4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002a52:	4641      	mov	r1, r8
 8002a54:	1854      	adds	r4, r2, r1
 8002a56:	4649      	mov	r1, r9
 8002a58:	eb43 0501 	adc.w	r5, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	00eb      	lsls	r3, r5, #3
 8002a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6a:	00e2      	lsls	r2, r4, #3
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002a78:	464b      	mov	r3, r9
 8002a7a:	eb45 0303 	adc.w	r3, r5, r3
 8002a7e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002a82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002a8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8002a9e:	4629      	mov	r1, r5
 8002aa0:	008b      	lsls	r3, r1, #2
 8002aa2:	4621      	mov	r1, r4
 8002aa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002aa8:	4621      	mov	r1, r4
 8002aaa:	008a      	lsls	r2, r1, #2
 8002aac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8002ab0:	f7fd ff34 	bl	800091c <__aeabi_uldivmod>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	460b      	mov	r3, r1
 8002ab8:	4b60      	ldr	r3, [pc, #384]	; (8002c3c <UART_SetConfig+0x4e4>)
 8002aba:	fba3 2302 	umull	r2, r3, r3, r2
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	011c      	lsls	r4, r3, #4
 8002ac2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002acc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002ad0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8002ad4:	4642      	mov	r2, r8
 8002ad6:	464b      	mov	r3, r9
 8002ad8:	1891      	adds	r1, r2, r2
 8002ada:	61b9      	str	r1, [r7, #24]
 8002adc:	415b      	adcs	r3, r3
 8002ade:	61fb      	str	r3, [r7, #28]
 8002ae0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ae4:	4641      	mov	r1, r8
 8002ae6:	1851      	adds	r1, r2, r1
 8002ae8:	6139      	str	r1, [r7, #16]
 8002aea:	4649      	mov	r1, r9
 8002aec:	414b      	adcs	r3, r1
 8002aee:	617b      	str	r3, [r7, #20]
 8002af0:	f04f 0200 	mov.w	r2, #0
 8002af4:	f04f 0300 	mov.w	r3, #0
 8002af8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002afc:	4659      	mov	r1, fp
 8002afe:	00cb      	lsls	r3, r1, #3
 8002b00:	4651      	mov	r1, sl
 8002b02:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b06:	4651      	mov	r1, sl
 8002b08:	00ca      	lsls	r2, r1, #3
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	4642      	mov	r2, r8
 8002b12:	189b      	adds	r3, r3, r2
 8002b14:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b18:	464b      	mov	r3, r9
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	eb42 0303 	adc.w	r3, r2, r3
 8002b20:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b2e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002b30:	f04f 0200 	mov.w	r2, #0
 8002b34:	f04f 0300 	mov.w	r3, #0
 8002b38:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002b3c:	4649      	mov	r1, r9
 8002b3e:	008b      	lsls	r3, r1, #2
 8002b40:	4641      	mov	r1, r8
 8002b42:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b46:	4641      	mov	r1, r8
 8002b48:	008a      	lsls	r2, r1, #2
 8002b4a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002b4e:	f7fd fee5 	bl	800091c <__aeabi_uldivmod>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4611      	mov	r1, r2
 8002b58:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <UART_SetConfig+0x4e4>)
 8002b5a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b5e:	095b      	lsrs	r3, r3, #5
 8002b60:	2264      	movs	r2, #100	; 0x64
 8002b62:	fb02 f303 	mul.w	r3, r2, r3
 8002b66:	1acb      	subs	r3, r1, r3
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	3332      	adds	r3, #50	; 0x32
 8002b6c:	4a33      	ldr	r2, [pc, #204]	; (8002c3c <UART_SetConfig+0x4e4>)
 8002b6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b72:	095b      	lsrs	r3, r3, #5
 8002b74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b78:	441c      	add	r4, r3
 8002b7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002b7e:	2200      	movs	r2, #0
 8002b80:	673b      	str	r3, [r7, #112]	; 0x70
 8002b82:	677a      	str	r2, [r7, #116]	; 0x74
 8002b84:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002b88:	4642      	mov	r2, r8
 8002b8a:	464b      	mov	r3, r9
 8002b8c:	1891      	adds	r1, r2, r2
 8002b8e:	60b9      	str	r1, [r7, #8]
 8002b90:	415b      	adcs	r3, r3
 8002b92:	60fb      	str	r3, [r7, #12]
 8002b94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002b98:	4641      	mov	r1, r8
 8002b9a:	1851      	adds	r1, r2, r1
 8002b9c:	6039      	str	r1, [r7, #0]
 8002b9e:	4649      	mov	r1, r9
 8002ba0:	414b      	adcs	r3, r1
 8002ba2:	607b      	str	r3, [r7, #4]
 8002ba4:	f04f 0200 	mov.w	r2, #0
 8002ba8:	f04f 0300 	mov.w	r3, #0
 8002bac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002bb0:	4659      	mov	r1, fp
 8002bb2:	00cb      	lsls	r3, r1, #3
 8002bb4:	4651      	mov	r1, sl
 8002bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bba:	4651      	mov	r1, sl
 8002bbc:	00ca      	lsls	r2, r1, #3
 8002bbe:	4610      	mov	r0, r2
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4642      	mov	r2, r8
 8002bc6:	189b      	adds	r3, r3, r2
 8002bc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bca:	464b      	mov	r3, r9
 8002bcc:	460a      	mov	r2, r1
 8002bce:	eb42 0303 	adc.w	r3, r2, r3
 8002bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bde:	667a      	str	r2, [r7, #100]	; 0x64
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	f04f 0300 	mov.w	r3, #0
 8002be8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002bec:	4649      	mov	r1, r9
 8002bee:	008b      	lsls	r3, r1, #2
 8002bf0:	4641      	mov	r1, r8
 8002bf2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002bf6:	4641      	mov	r1, r8
 8002bf8:	008a      	lsls	r2, r1, #2
 8002bfa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002bfe:	f7fd fe8d 	bl	800091c <__aeabi_uldivmod>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <UART_SetConfig+0x4e4>)
 8002c08:	fba3 1302 	umull	r1, r3, r3, r2
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	2164      	movs	r1, #100	; 0x64
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	011b      	lsls	r3, r3, #4
 8002c18:	3332      	adds	r3, #50	; 0x32
 8002c1a:	4a08      	ldr	r2, [pc, #32]	; (8002c3c <UART_SetConfig+0x4e4>)
 8002c1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002c20:	095b      	lsrs	r3, r3, #5
 8002c22:	f003 020f 	and.w	r2, r3, #15
 8002c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4422      	add	r2, r4
 8002c2e:	609a      	str	r2, [r3, #8]
}
 8002c30:	bf00      	nop
 8002c32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002c36:	46bd      	mov	sp, r7
 8002c38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c3c:	51eb851f 	.word	0x51eb851f

08002c40 <rand>:
 8002c40:	4b16      	ldr	r3, [pc, #88]	; (8002c9c <rand+0x5c>)
 8002c42:	b510      	push	{r4, lr}
 8002c44:	681c      	ldr	r4, [r3, #0]
 8002c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c48:	b9b3      	cbnz	r3, 8002c78 <rand+0x38>
 8002c4a:	2018      	movs	r0, #24
 8002c4c:	f000 fa22 	bl	8003094 <malloc>
 8002c50:	4602      	mov	r2, r0
 8002c52:	6320      	str	r0, [r4, #48]	; 0x30
 8002c54:	b920      	cbnz	r0, 8002c60 <rand+0x20>
 8002c56:	4b12      	ldr	r3, [pc, #72]	; (8002ca0 <rand+0x60>)
 8002c58:	4812      	ldr	r0, [pc, #72]	; (8002ca4 <rand+0x64>)
 8002c5a:	2152      	movs	r1, #82	; 0x52
 8002c5c:	f000 f9b0 	bl	8002fc0 <__assert_func>
 8002c60:	4911      	ldr	r1, [pc, #68]	; (8002ca8 <rand+0x68>)
 8002c62:	4b12      	ldr	r3, [pc, #72]	; (8002cac <rand+0x6c>)
 8002c64:	e9c0 1300 	strd	r1, r3, [r0]
 8002c68:	4b11      	ldr	r3, [pc, #68]	; (8002cb0 <rand+0x70>)
 8002c6a:	6083      	str	r3, [r0, #8]
 8002c6c:	230b      	movs	r3, #11
 8002c6e:	8183      	strh	r3, [r0, #12]
 8002c70:	2100      	movs	r1, #0
 8002c72:	2001      	movs	r0, #1
 8002c74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8002c78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8002c7a:	480e      	ldr	r0, [pc, #56]	; (8002cb4 <rand+0x74>)
 8002c7c:	690b      	ldr	r3, [r1, #16]
 8002c7e:	694c      	ldr	r4, [r1, #20]
 8002c80:	4a0d      	ldr	r2, [pc, #52]	; (8002cb8 <rand+0x78>)
 8002c82:	4358      	muls	r0, r3
 8002c84:	fb02 0004 	mla	r0, r2, r4, r0
 8002c88:	fba3 3202 	umull	r3, r2, r3, r2
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	eb40 0002 	adc.w	r0, r0, r2
 8002c92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8002c96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8002c9a:	bd10      	pop	{r4, pc}
 8002c9c:	20000064 	.word	0x20000064
 8002ca0:	08003c3c 	.word	0x08003c3c
 8002ca4:	08003c53 	.word	0x08003c53
 8002ca8:	abcd330e 	.word	0xabcd330e
 8002cac:	e66d1234 	.word	0xe66d1234
 8002cb0:	0005deec 	.word	0x0005deec
 8002cb4:	5851f42d 	.word	0x5851f42d
 8002cb8:	4c957f2d 	.word	0x4c957f2d

08002cbc <std>:
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	b510      	push	{r4, lr}
 8002cc0:	4604      	mov	r4, r0
 8002cc2:	e9c0 3300 	strd	r3, r3, [r0]
 8002cc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cca:	6083      	str	r3, [r0, #8]
 8002ccc:	8181      	strh	r1, [r0, #12]
 8002cce:	6643      	str	r3, [r0, #100]	; 0x64
 8002cd0:	81c2      	strh	r2, [r0, #14]
 8002cd2:	6183      	str	r3, [r0, #24]
 8002cd4:	4619      	mov	r1, r3
 8002cd6:	2208      	movs	r2, #8
 8002cd8:	305c      	adds	r0, #92	; 0x5c
 8002cda:	f000 f8f4 	bl	8002ec6 <memset>
 8002cde:	4b0d      	ldr	r3, [pc, #52]	; (8002d14 <std+0x58>)
 8002ce0:	6263      	str	r3, [r4, #36]	; 0x24
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <std+0x5c>)
 8002ce4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002ce6:	4b0d      	ldr	r3, [pc, #52]	; (8002d1c <std+0x60>)
 8002ce8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cea:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <std+0x64>)
 8002cec:	6323      	str	r3, [r4, #48]	; 0x30
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <std+0x68>)
 8002cf0:	6224      	str	r4, [r4, #32]
 8002cf2:	429c      	cmp	r4, r3
 8002cf4:	d006      	beq.n	8002d04 <std+0x48>
 8002cf6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8002cfa:	4294      	cmp	r4, r2
 8002cfc:	d002      	beq.n	8002d04 <std+0x48>
 8002cfe:	33d0      	adds	r3, #208	; 0xd0
 8002d00:	429c      	cmp	r4, r3
 8002d02:	d105      	bne.n	8002d10 <std+0x54>
 8002d04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002d08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d0c:	f000 b954 	b.w	8002fb8 <__retarget_lock_init_recursive>
 8002d10:	bd10      	pop	{r4, pc}
 8002d12:	bf00      	nop
 8002d14:	08002e41 	.word	0x08002e41
 8002d18:	08002e63 	.word	0x08002e63
 8002d1c:	08002e9b 	.word	0x08002e9b
 8002d20:	08002ebf 	.word	0x08002ebf
 8002d24:	200000d8 	.word	0x200000d8

08002d28 <stdio_exit_handler>:
 8002d28:	4a02      	ldr	r2, [pc, #8]	; (8002d34 <stdio_exit_handler+0xc>)
 8002d2a:	4903      	ldr	r1, [pc, #12]	; (8002d38 <stdio_exit_handler+0x10>)
 8002d2c:	4803      	ldr	r0, [pc, #12]	; (8002d3c <stdio_exit_handler+0x14>)
 8002d2e:	f000 b869 	b.w	8002e04 <_fwalk_sglue>
 8002d32:	bf00      	nop
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	08003309 	.word	0x08003309
 8002d3c:	20000018 	.word	0x20000018

08002d40 <cleanup_stdio>:
 8002d40:	6841      	ldr	r1, [r0, #4]
 8002d42:	4b0c      	ldr	r3, [pc, #48]	; (8002d74 <cleanup_stdio+0x34>)
 8002d44:	4299      	cmp	r1, r3
 8002d46:	b510      	push	{r4, lr}
 8002d48:	4604      	mov	r4, r0
 8002d4a:	d001      	beq.n	8002d50 <cleanup_stdio+0x10>
 8002d4c:	f000 fadc 	bl	8003308 <_fflush_r>
 8002d50:	68a1      	ldr	r1, [r4, #8]
 8002d52:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <cleanup_stdio+0x38>)
 8002d54:	4299      	cmp	r1, r3
 8002d56:	d002      	beq.n	8002d5e <cleanup_stdio+0x1e>
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f000 fad5 	bl	8003308 <_fflush_r>
 8002d5e:	68e1      	ldr	r1, [r4, #12]
 8002d60:	4b06      	ldr	r3, [pc, #24]	; (8002d7c <cleanup_stdio+0x3c>)
 8002d62:	4299      	cmp	r1, r3
 8002d64:	d004      	beq.n	8002d70 <cleanup_stdio+0x30>
 8002d66:	4620      	mov	r0, r4
 8002d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d6c:	f000 bacc 	b.w	8003308 <_fflush_r>
 8002d70:	bd10      	pop	{r4, pc}
 8002d72:	bf00      	nop
 8002d74:	200000d8 	.word	0x200000d8
 8002d78:	20000140 	.word	0x20000140
 8002d7c:	200001a8 	.word	0x200001a8

08002d80 <global_stdio_init.part.0>:
 8002d80:	b510      	push	{r4, lr}
 8002d82:	4b0b      	ldr	r3, [pc, #44]	; (8002db0 <global_stdio_init.part.0+0x30>)
 8002d84:	4c0b      	ldr	r4, [pc, #44]	; (8002db4 <global_stdio_init.part.0+0x34>)
 8002d86:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <global_stdio_init.part.0+0x38>)
 8002d88:	601a      	str	r2, [r3, #0]
 8002d8a:	4620      	mov	r0, r4
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	2104      	movs	r1, #4
 8002d90:	f7ff ff94 	bl	8002cbc <std>
 8002d94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8002d98:	2201      	movs	r2, #1
 8002d9a:	2109      	movs	r1, #9
 8002d9c:	f7ff ff8e 	bl	8002cbc <std>
 8002da0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8002da4:	2202      	movs	r2, #2
 8002da6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002daa:	2112      	movs	r1, #18
 8002dac:	f7ff bf86 	b.w	8002cbc <std>
 8002db0:	20000210 	.word	0x20000210
 8002db4:	200000d8 	.word	0x200000d8
 8002db8:	08002d29 	.word	0x08002d29

08002dbc <__sfp_lock_acquire>:
 8002dbc:	4801      	ldr	r0, [pc, #4]	; (8002dc4 <__sfp_lock_acquire+0x8>)
 8002dbe:	f000 b8fc 	b.w	8002fba <__retarget_lock_acquire_recursive>
 8002dc2:	bf00      	nop
 8002dc4:	20000219 	.word	0x20000219

08002dc8 <__sfp_lock_release>:
 8002dc8:	4801      	ldr	r0, [pc, #4]	; (8002dd0 <__sfp_lock_release+0x8>)
 8002dca:	f000 b8f7 	b.w	8002fbc <__retarget_lock_release_recursive>
 8002dce:	bf00      	nop
 8002dd0:	20000219 	.word	0x20000219

08002dd4 <__sinit>:
 8002dd4:	b510      	push	{r4, lr}
 8002dd6:	4604      	mov	r4, r0
 8002dd8:	f7ff fff0 	bl	8002dbc <__sfp_lock_acquire>
 8002ddc:	6a23      	ldr	r3, [r4, #32]
 8002dde:	b11b      	cbz	r3, 8002de8 <__sinit+0x14>
 8002de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de4:	f7ff bff0 	b.w	8002dc8 <__sfp_lock_release>
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <__sinit+0x28>)
 8002dea:	6223      	str	r3, [r4, #32]
 8002dec:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <__sinit+0x2c>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1f5      	bne.n	8002de0 <__sinit+0xc>
 8002df4:	f7ff ffc4 	bl	8002d80 <global_stdio_init.part.0>
 8002df8:	e7f2      	b.n	8002de0 <__sinit+0xc>
 8002dfa:	bf00      	nop
 8002dfc:	08002d41 	.word	0x08002d41
 8002e00:	20000210 	.word	0x20000210

08002e04 <_fwalk_sglue>:
 8002e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e08:	4607      	mov	r7, r0
 8002e0a:	4688      	mov	r8, r1
 8002e0c:	4614      	mov	r4, r2
 8002e0e:	2600      	movs	r6, #0
 8002e10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e14:	f1b9 0901 	subs.w	r9, r9, #1
 8002e18:	d505      	bpl.n	8002e26 <_fwalk_sglue+0x22>
 8002e1a:	6824      	ldr	r4, [r4, #0]
 8002e1c:	2c00      	cmp	r4, #0
 8002e1e:	d1f7      	bne.n	8002e10 <_fwalk_sglue+0xc>
 8002e20:	4630      	mov	r0, r6
 8002e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d907      	bls.n	8002e3c <_fwalk_sglue+0x38>
 8002e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e30:	3301      	adds	r3, #1
 8002e32:	d003      	beq.n	8002e3c <_fwalk_sglue+0x38>
 8002e34:	4629      	mov	r1, r5
 8002e36:	4638      	mov	r0, r7
 8002e38:	47c0      	blx	r8
 8002e3a:	4306      	orrs	r6, r0
 8002e3c:	3568      	adds	r5, #104	; 0x68
 8002e3e:	e7e9      	b.n	8002e14 <_fwalk_sglue+0x10>

08002e40 <__sread>:
 8002e40:	b510      	push	{r4, lr}
 8002e42:	460c      	mov	r4, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	f000 f868 	bl	8002f1c <_read_r>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	bfab      	itete	ge
 8002e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002e52:	89a3      	ldrhlt	r3, [r4, #12]
 8002e54:	181b      	addge	r3, r3, r0
 8002e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002e5a:	bfac      	ite	ge
 8002e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8002e5e:	81a3      	strhlt	r3, [r4, #12]
 8002e60:	bd10      	pop	{r4, pc}

08002e62 <__swrite>:
 8002e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002e66:	461f      	mov	r7, r3
 8002e68:	898b      	ldrh	r3, [r1, #12]
 8002e6a:	05db      	lsls	r3, r3, #23
 8002e6c:	4605      	mov	r5, r0
 8002e6e:	460c      	mov	r4, r1
 8002e70:	4616      	mov	r6, r2
 8002e72:	d505      	bpl.n	8002e80 <__swrite+0x1e>
 8002e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e78:	2302      	movs	r3, #2
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f000 f83c 	bl	8002ef8 <_lseek_r>
 8002e80:	89a3      	ldrh	r3, [r4, #12]
 8002e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002e8a:	81a3      	strh	r3, [r4, #12]
 8002e8c:	4632      	mov	r2, r6
 8002e8e:	463b      	mov	r3, r7
 8002e90:	4628      	mov	r0, r5
 8002e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002e96:	f000 b853 	b.w	8002f40 <_write_r>

08002e9a <__sseek>:
 8002e9a:	b510      	push	{r4, lr}
 8002e9c:	460c      	mov	r4, r1
 8002e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea2:	f000 f829 	bl	8002ef8 <_lseek_r>
 8002ea6:	1c43      	adds	r3, r0, #1
 8002ea8:	89a3      	ldrh	r3, [r4, #12]
 8002eaa:	bf15      	itete	ne
 8002eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8002eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002eb6:	81a3      	strheq	r3, [r4, #12]
 8002eb8:	bf18      	it	ne
 8002eba:	81a3      	strhne	r3, [r4, #12]
 8002ebc:	bd10      	pop	{r4, pc}

08002ebe <__sclose>:
 8002ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ec2:	f000 b809 	b.w	8002ed8 <_close_r>

08002ec6 <memset>:
 8002ec6:	4402      	add	r2, r0
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d100      	bne.n	8002ed0 <memset+0xa>
 8002ece:	4770      	bx	lr
 8002ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8002ed4:	e7f9      	b.n	8002eca <memset+0x4>
	...

08002ed8 <_close_r>:
 8002ed8:	b538      	push	{r3, r4, r5, lr}
 8002eda:	4d06      	ldr	r5, [pc, #24]	; (8002ef4 <_close_r+0x1c>)
 8002edc:	2300      	movs	r3, #0
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4608      	mov	r0, r1
 8002ee2:	602b      	str	r3, [r5, #0]
 8002ee4:	f7fe f9d3 	bl	800128e <_close>
 8002ee8:	1c43      	adds	r3, r0, #1
 8002eea:	d102      	bne.n	8002ef2 <_close_r+0x1a>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b103      	cbz	r3, 8002ef2 <_close_r+0x1a>
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	bd38      	pop	{r3, r4, r5, pc}
 8002ef4:	20000214 	.word	0x20000214

08002ef8 <_lseek_r>:
 8002ef8:	b538      	push	{r3, r4, r5, lr}
 8002efa:	4d07      	ldr	r5, [pc, #28]	; (8002f18 <_lseek_r+0x20>)
 8002efc:	4604      	mov	r4, r0
 8002efe:	4608      	mov	r0, r1
 8002f00:	4611      	mov	r1, r2
 8002f02:	2200      	movs	r2, #0
 8002f04:	602a      	str	r2, [r5, #0]
 8002f06:	461a      	mov	r2, r3
 8002f08:	f7fe f9e8 	bl	80012dc <_lseek>
 8002f0c:	1c43      	adds	r3, r0, #1
 8002f0e:	d102      	bne.n	8002f16 <_lseek_r+0x1e>
 8002f10:	682b      	ldr	r3, [r5, #0]
 8002f12:	b103      	cbz	r3, 8002f16 <_lseek_r+0x1e>
 8002f14:	6023      	str	r3, [r4, #0]
 8002f16:	bd38      	pop	{r3, r4, r5, pc}
 8002f18:	20000214 	.word	0x20000214

08002f1c <_read_r>:
 8002f1c:	b538      	push	{r3, r4, r5, lr}
 8002f1e:	4d07      	ldr	r5, [pc, #28]	; (8002f3c <_read_r+0x20>)
 8002f20:	4604      	mov	r4, r0
 8002f22:	4608      	mov	r0, r1
 8002f24:	4611      	mov	r1, r2
 8002f26:	2200      	movs	r2, #0
 8002f28:	602a      	str	r2, [r5, #0]
 8002f2a:	461a      	mov	r2, r3
 8002f2c:	f7fe f976 	bl	800121c <_read>
 8002f30:	1c43      	adds	r3, r0, #1
 8002f32:	d102      	bne.n	8002f3a <_read_r+0x1e>
 8002f34:	682b      	ldr	r3, [r5, #0]
 8002f36:	b103      	cbz	r3, 8002f3a <_read_r+0x1e>
 8002f38:	6023      	str	r3, [r4, #0]
 8002f3a:	bd38      	pop	{r3, r4, r5, pc}
 8002f3c:	20000214 	.word	0x20000214

08002f40 <_write_r>:
 8002f40:	b538      	push	{r3, r4, r5, lr}
 8002f42:	4d07      	ldr	r5, [pc, #28]	; (8002f60 <_write_r+0x20>)
 8002f44:	4604      	mov	r4, r0
 8002f46:	4608      	mov	r0, r1
 8002f48:	4611      	mov	r1, r2
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	602a      	str	r2, [r5, #0]
 8002f4e:	461a      	mov	r2, r3
 8002f50:	f7fe f981 	bl	8001256 <_write>
 8002f54:	1c43      	adds	r3, r0, #1
 8002f56:	d102      	bne.n	8002f5e <_write_r+0x1e>
 8002f58:	682b      	ldr	r3, [r5, #0]
 8002f5a:	b103      	cbz	r3, 8002f5e <_write_r+0x1e>
 8002f5c:	6023      	str	r3, [r4, #0]
 8002f5e:	bd38      	pop	{r3, r4, r5, pc}
 8002f60:	20000214 	.word	0x20000214

08002f64 <__errno>:
 8002f64:	4b01      	ldr	r3, [pc, #4]	; (8002f6c <__errno+0x8>)
 8002f66:	6818      	ldr	r0, [r3, #0]
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	20000064 	.word	0x20000064

08002f70 <__libc_init_array>:
 8002f70:	b570      	push	{r4, r5, r6, lr}
 8002f72:	4d0d      	ldr	r5, [pc, #52]	; (8002fa8 <__libc_init_array+0x38>)
 8002f74:	4c0d      	ldr	r4, [pc, #52]	; (8002fac <__libc_init_array+0x3c>)
 8002f76:	1b64      	subs	r4, r4, r5
 8002f78:	10a4      	asrs	r4, r4, #2
 8002f7a:	2600      	movs	r6, #0
 8002f7c:	42a6      	cmp	r6, r4
 8002f7e:	d109      	bne.n	8002f94 <__libc_init_array+0x24>
 8002f80:	4d0b      	ldr	r5, [pc, #44]	; (8002fb0 <__libc_init_array+0x40>)
 8002f82:	4c0c      	ldr	r4, [pc, #48]	; (8002fb4 <__libc_init_array+0x44>)
 8002f84:	f000 fe42 	bl	8003c0c <_init>
 8002f88:	1b64      	subs	r4, r4, r5
 8002f8a:	10a4      	asrs	r4, r4, #2
 8002f8c:	2600      	movs	r6, #0
 8002f8e:	42a6      	cmp	r6, r4
 8002f90:	d105      	bne.n	8002f9e <__libc_init_array+0x2e>
 8002f92:	bd70      	pop	{r4, r5, r6, pc}
 8002f94:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f98:	4798      	blx	r3
 8002f9a:	3601      	adds	r6, #1
 8002f9c:	e7ee      	b.n	8002f7c <__libc_init_array+0xc>
 8002f9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002fa2:	4798      	blx	r3
 8002fa4:	3601      	adds	r6, #1
 8002fa6:	e7f2      	b.n	8002f8e <__libc_init_array+0x1e>
 8002fa8:	08003d24 	.word	0x08003d24
 8002fac:	08003d24 	.word	0x08003d24
 8002fb0:	08003d24 	.word	0x08003d24
 8002fb4:	08003d28 	.word	0x08003d28

08002fb8 <__retarget_lock_init_recursive>:
 8002fb8:	4770      	bx	lr

08002fba <__retarget_lock_acquire_recursive>:
 8002fba:	4770      	bx	lr

08002fbc <__retarget_lock_release_recursive>:
 8002fbc:	4770      	bx	lr
	...

08002fc0 <__assert_func>:
 8002fc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002fc2:	4614      	mov	r4, r2
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4b09      	ldr	r3, [pc, #36]	; (8002fec <__assert_func+0x2c>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4605      	mov	r5, r0
 8002fcc:	68d8      	ldr	r0, [r3, #12]
 8002fce:	b14c      	cbz	r4, 8002fe4 <__assert_func+0x24>
 8002fd0:	4b07      	ldr	r3, [pc, #28]	; (8002ff0 <__assert_func+0x30>)
 8002fd2:	9100      	str	r1, [sp, #0]
 8002fd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8002fd8:	4906      	ldr	r1, [pc, #24]	; (8002ff4 <__assert_func+0x34>)
 8002fda:	462b      	mov	r3, r5
 8002fdc:	f000 f9bc 	bl	8003358 <fiprintf>
 8002fe0:	f000 f9dc 	bl	800339c <abort>
 8002fe4:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <__assert_func+0x38>)
 8002fe6:	461c      	mov	r4, r3
 8002fe8:	e7f3      	b.n	8002fd2 <__assert_func+0x12>
 8002fea:	bf00      	nop
 8002fec:	20000064 	.word	0x20000064
 8002ff0:	08003cab 	.word	0x08003cab
 8002ff4:	08003cb8 	.word	0x08003cb8
 8002ff8:	08003ce6 	.word	0x08003ce6

08002ffc <_free_r>:
 8002ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002ffe:	2900      	cmp	r1, #0
 8003000:	d044      	beq.n	800308c <_free_r+0x90>
 8003002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003006:	9001      	str	r0, [sp, #4]
 8003008:	2b00      	cmp	r3, #0
 800300a:	f1a1 0404 	sub.w	r4, r1, #4
 800300e:	bfb8      	it	lt
 8003010:	18e4      	addlt	r4, r4, r3
 8003012:	f000 f8e7 	bl	80031e4 <__malloc_lock>
 8003016:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <_free_r+0x94>)
 8003018:	9801      	ldr	r0, [sp, #4]
 800301a:	6813      	ldr	r3, [r2, #0]
 800301c:	b933      	cbnz	r3, 800302c <_free_r+0x30>
 800301e:	6063      	str	r3, [r4, #4]
 8003020:	6014      	str	r4, [r2, #0]
 8003022:	b003      	add	sp, #12
 8003024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003028:	f000 b8e2 	b.w	80031f0 <__malloc_unlock>
 800302c:	42a3      	cmp	r3, r4
 800302e:	d908      	bls.n	8003042 <_free_r+0x46>
 8003030:	6825      	ldr	r5, [r4, #0]
 8003032:	1961      	adds	r1, r4, r5
 8003034:	428b      	cmp	r3, r1
 8003036:	bf01      	itttt	eq
 8003038:	6819      	ldreq	r1, [r3, #0]
 800303a:	685b      	ldreq	r3, [r3, #4]
 800303c:	1949      	addeq	r1, r1, r5
 800303e:	6021      	streq	r1, [r4, #0]
 8003040:	e7ed      	b.n	800301e <_free_r+0x22>
 8003042:	461a      	mov	r2, r3
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	b10b      	cbz	r3, 800304c <_free_r+0x50>
 8003048:	42a3      	cmp	r3, r4
 800304a:	d9fa      	bls.n	8003042 <_free_r+0x46>
 800304c:	6811      	ldr	r1, [r2, #0]
 800304e:	1855      	adds	r5, r2, r1
 8003050:	42a5      	cmp	r5, r4
 8003052:	d10b      	bne.n	800306c <_free_r+0x70>
 8003054:	6824      	ldr	r4, [r4, #0]
 8003056:	4421      	add	r1, r4
 8003058:	1854      	adds	r4, r2, r1
 800305a:	42a3      	cmp	r3, r4
 800305c:	6011      	str	r1, [r2, #0]
 800305e:	d1e0      	bne.n	8003022 <_free_r+0x26>
 8003060:	681c      	ldr	r4, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	6053      	str	r3, [r2, #4]
 8003066:	440c      	add	r4, r1
 8003068:	6014      	str	r4, [r2, #0]
 800306a:	e7da      	b.n	8003022 <_free_r+0x26>
 800306c:	d902      	bls.n	8003074 <_free_r+0x78>
 800306e:	230c      	movs	r3, #12
 8003070:	6003      	str	r3, [r0, #0]
 8003072:	e7d6      	b.n	8003022 <_free_r+0x26>
 8003074:	6825      	ldr	r5, [r4, #0]
 8003076:	1961      	adds	r1, r4, r5
 8003078:	428b      	cmp	r3, r1
 800307a:	bf04      	itt	eq
 800307c:	6819      	ldreq	r1, [r3, #0]
 800307e:	685b      	ldreq	r3, [r3, #4]
 8003080:	6063      	str	r3, [r4, #4]
 8003082:	bf04      	itt	eq
 8003084:	1949      	addeq	r1, r1, r5
 8003086:	6021      	streq	r1, [r4, #0]
 8003088:	6054      	str	r4, [r2, #4]
 800308a:	e7ca      	b.n	8003022 <_free_r+0x26>
 800308c:	b003      	add	sp, #12
 800308e:	bd30      	pop	{r4, r5, pc}
 8003090:	2000021c 	.word	0x2000021c

08003094 <malloc>:
 8003094:	4b02      	ldr	r3, [pc, #8]	; (80030a0 <malloc+0xc>)
 8003096:	4601      	mov	r1, r0
 8003098:	6818      	ldr	r0, [r3, #0]
 800309a:	f000 b823 	b.w	80030e4 <_malloc_r>
 800309e:	bf00      	nop
 80030a0:	20000064 	.word	0x20000064

080030a4 <sbrk_aligned>:
 80030a4:	b570      	push	{r4, r5, r6, lr}
 80030a6:	4e0e      	ldr	r6, [pc, #56]	; (80030e0 <sbrk_aligned+0x3c>)
 80030a8:	460c      	mov	r4, r1
 80030aa:	6831      	ldr	r1, [r6, #0]
 80030ac:	4605      	mov	r5, r0
 80030ae:	b911      	cbnz	r1, 80030b6 <sbrk_aligned+0x12>
 80030b0:	f000 f964 	bl	800337c <_sbrk_r>
 80030b4:	6030      	str	r0, [r6, #0]
 80030b6:	4621      	mov	r1, r4
 80030b8:	4628      	mov	r0, r5
 80030ba:	f000 f95f 	bl	800337c <_sbrk_r>
 80030be:	1c43      	adds	r3, r0, #1
 80030c0:	d00a      	beq.n	80030d8 <sbrk_aligned+0x34>
 80030c2:	1cc4      	adds	r4, r0, #3
 80030c4:	f024 0403 	bic.w	r4, r4, #3
 80030c8:	42a0      	cmp	r0, r4
 80030ca:	d007      	beq.n	80030dc <sbrk_aligned+0x38>
 80030cc:	1a21      	subs	r1, r4, r0
 80030ce:	4628      	mov	r0, r5
 80030d0:	f000 f954 	bl	800337c <_sbrk_r>
 80030d4:	3001      	adds	r0, #1
 80030d6:	d101      	bne.n	80030dc <sbrk_aligned+0x38>
 80030d8:	f04f 34ff 	mov.w	r4, #4294967295
 80030dc:	4620      	mov	r0, r4
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	20000220 	.word	0x20000220

080030e4 <_malloc_r>:
 80030e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80030e8:	1ccd      	adds	r5, r1, #3
 80030ea:	f025 0503 	bic.w	r5, r5, #3
 80030ee:	3508      	adds	r5, #8
 80030f0:	2d0c      	cmp	r5, #12
 80030f2:	bf38      	it	cc
 80030f4:	250c      	movcc	r5, #12
 80030f6:	2d00      	cmp	r5, #0
 80030f8:	4607      	mov	r7, r0
 80030fa:	db01      	blt.n	8003100 <_malloc_r+0x1c>
 80030fc:	42a9      	cmp	r1, r5
 80030fe:	d905      	bls.n	800310c <_malloc_r+0x28>
 8003100:	230c      	movs	r3, #12
 8003102:	603b      	str	r3, [r7, #0]
 8003104:	2600      	movs	r6, #0
 8003106:	4630      	mov	r0, r6
 8003108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800310c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80031e0 <_malloc_r+0xfc>
 8003110:	f000 f868 	bl	80031e4 <__malloc_lock>
 8003114:	f8d8 3000 	ldr.w	r3, [r8]
 8003118:	461c      	mov	r4, r3
 800311a:	bb5c      	cbnz	r4, 8003174 <_malloc_r+0x90>
 800311c:	4629      	mov	r1, r5
 800311e:	4638      	mov	r0, r7
 8003120:	f7ff ffc0 	bl	80030a4 <sbrk_aligned>
 8003124:	1c43      	adds	r3, r0, #1
 8003126:	4604      	mov	r4, r0
 8003128:	d155      	bne.n	80031d6 <_malloc_r+0xf2>
 800312a:	f8d8 4000 	ldr.w	r4, [r8]
 800312e:	4626      	mov	r6, r4
 8003130:	2e00      	cmp	r6, #0
 8003132:	d145      	bne.n	80031c0 <_malloc_r+0xdc>
 8003134:	2c00      	cmp	r4, #0
 8003136:	d048      	beq.n	80031ca <_malloc_r+0xe6>
 8003138:	6823      	ldr	r3, [r4, #0]
 800313a:	4631      	mov	r1, r6
 800313c:	4638      	mov	r0, r7
 800313e:	eb04 0903 	add.w	r9, r4, r3
 8003142:	f000 f91b 	bl	800337c <_sbrk_r>
 8003146:	4581      	cmp	r9, r0
 8003148:	d13f      	bne.n	80031ca <_malloc_r+0xe6>
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	1a6d      	subs	r5, r5, r1
 800314e:	4629      	mov	r1, r5
 8003150:	4638      	mov	r0, r7
 8003152:	f7ff ffa7 	bl	80030a4 <sbrk_aligned>
 8003156:	3001      	adds	r0, #1
 8003158:	d037      	beq.n	80031ca <_malloc_r+0xe6>
 800315a:	6823      	ldr	r3, [r4, #0]
 800315c:	442b      	add	r3, r5
 800315e:	6023      	str	r3, [r4, #0]
 8003160:	f8d8 3000 	ldr.w	r3, [r8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d038      	beq.n	80031da <_malloc_r+0xf6>
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	42a2      	cmp	r2, r4
 800316c:	d12b      	bne.n	80031c6 <_malloc_r+0xe2>
 800316e:	2200      	movs	r2, #0
 8003170:	605a      	str	r2, [r3, #4]
 8003172:	e00f      	b.n	8003194 <_malloc_r+0xb0>
 8003174:	6822      	ldr	r2, [r4, #0]
 8003176:	1b52      	subs	r2, r2, r5
 8003178:	d41f      	bmi.n	80031ba <_malloc_r+0xd6>
 800317a:	2a0b      	cmp	r2, #11
 800317c:	d917      	bls.n	80031ae <_malloc_r+0xca>
 800317e:	1961      	adds	r1, r4, r5
 8003180:	42a3      	cmp	r3, r4
 8003182:	6025      	str	r5, [r4, #0]
 8003184:	bf18      	it	ne
 8003186:	6059      	strne	r1, [r3, #4]
 8003188:	6863      	ldr	r3, [r4, #4]
 800318a:	bf08      	it	eq
 800318c:	f8c8 1000 	streq.w	r1, [r8]
 8003190:	5162      	str	r2, [r4, r5]
 8003192:	604b      	str	r3, [r1, #4]
 8003194:	4638      	mov	r0, r7
 8003196:	f104 060b 	add.w	r6, r4, #11
 800319a:	f000 f829 	bl	80031f0 <__malloc_unlock>
 800319e:	f026 0607 	bic.w	r6, r6, #7
 80031a2:	1d23      	adds	r3, r4, #4
 80031a4:	1af2      	subs	r2, r6, r3
 80031a6:	d0ae      	beq.n	8003106 <_malloc_r+0x22>
 80031a8:	1b9b      	subs	r3, r3, r6
 80031aa:	50a3      	str	r3, [r4, r2]
 80031ac:	e7ab      	b.n	8003106 <_malloc_r+0x22>
 80031ae:	42a3      	cmp	r3, r4
 80031b0:	6862      	ldr	r2, [r4, #4]
 80031b2:	d1dd      	bne.n	8003170 <_malloc_r+0x8c>
 80031b4:	f8c8 2000 	str.w	r2, [r8]
 80031b8:	e7ec      	b.n	8003194 <_malloc_r+0xb0>
 80031ba:	4623      	mov	r3, r4
 80031bc:	6864      	ldr	r4, [r4, #4]
 80031be:	e7ac      	b.n	800311a <_malloc_r+0x36>
 80031c0:	4634      	mov	r4, r6
 80031c2:	6876      	ldr	r6, [r6, #4]
 80031c4:	e7b4      	b.n	8003130 <_malloc_r+0x4c>
 80031c6:	4613      	mov	r3, r2
 80031c8:	e7cc      	b.n	8003164 <_malloc_r+0x80>
 80031ca:	230c      	movs	r3, #12
 80031cc:	603b      	str	r3, [r7, #0]
 80031ce:	4638      	mov	r0, r7
 80031d0:	f000 f80e 	bl	80031f0 <__malloc_unlock>
 80031d4:	e797      	b.n	8003106 <_malloc_r+0x22>
 80031d6:	6025      	str	r5, [r4, #0]
 80031d8:	e7dc      	b.n	8003194 <_malloc_r+0xb0>
 80031da:	605b      	str	r3, [r3, #4]
 80031dc:	deff      	udf	#255	; 0xff
 80031de:	bf00      	nop
 80031e0:	2000021c 	.word	0x2000021c

080031e4 <__malloc_lock>:
 80031e4:	4801      	ldr	r0, [pc, #4]	; (80031ec <__malloc_lock+0x8>)
 80031e6:	f7ff bee8 	b.w	8002fba <__retarget_lock_acquire_recursive>
 80031ea:	bf00      	nop
 80031ec:	20000218 	.word	0x20000218

080031f0 <__malloc_unlock>:
 80031f0:	4801      	ldr	r0, [pc, #4]	; (80031f8 <__malloc_unlock+0x8>)
 80031f2:	f7ff bee3 	b.w	8002fbc <__retarget_lock_release_recursive>
 80031f6:	bf00      	nop
 80031f8:	20000218 	.word	0x20000218

080031fc <__sflush_r>:
 80031fc:	898a      	ldrh	r2, [r1, #12]
 80031fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003202:	4605      	mov	r5, r0
 8003204:	0710      	lsls	r0, r2, #28
 8003206:	460c      	mov	r4, r1
 8003208:	d458      	bmi.n	80032bc <__sflush_r+0xc0>
 800320a:	684b      	ldr	r3, [r1, #4]
 800320c:	2b00      	cmp	r3, #0
 800320e:	dc05      	bgt.n	800321c <__sflush_r+0x20>
 8003210:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	dc02      	bgt.n	800321c <__sflush_r+0x20>
 8003216:	2000      	movs	r0, #0
 8003218:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800321c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800321e:	2e00      	cmp	r6, #0
 8003220:	d0f9      	beq.n	8003216 <__sflush_r+0x1a>
 8003222:	2300      	movs	r3, #0
 8003224:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003228:	682f      	ldr	r7, [r5, #0]
 800322a:	6a21      	ldr	r1, [r4, #32]
 800322c:	602b      	str	r3, [r5, #0]
 800322e:	d032      	beq.n	8003296 <__sflush_r+0x9a>
 8003230:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003232:	89a3      	ldrh	r3, [r4, #12]
 8003234:	075a      	lsls	r2, r3, #29
 8003236:	d505      	bpl.n	8003244 <__sflush_r+0x48>
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	1ac0      	subs	r0, r0, r3
 800323c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800323e:	b10b      	cbz	r3, 8003244 <__sflush_r+0x48>
 8003240:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003242:	1ac0      	subs	r0, r0, r3
 8003244:	2300      	movs	r3, #0
 8003246:	4602      	mov	r2, r0
 8003248:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800324a:	6a21      	ldr	r1, [r4, #32]
 800324c:	4628      	mov	r0, r5
 800324e:	47b0      	blx	r6
 8003250:	1c43      	adds	r3, r0, #1
 8003252:	89a3      	ldrh	r3, [r4, #12]
 8003254:	d106      	bne.n	8003264 <__sflush_r+0x68>
 8003256:	6829      	ldr	r1, [r5, #0]
 8003258:	291d      	cmp	r1, #29
 800325a:	d82b      	bhi.n	80032b4 <__sflush_r+0xb8>
 800325c:	4a29      	ldr	r2, [pc, #164]	; (8003304 <__sflush_r+0x108>)
 800325e:	410a      	asrs	r2, r1
 8003260:	07d6      	lsls	r6, r2, #31
 8003262:	d427      	bmi.n	80032b4 <__sflush_r+0xb8>
 8003264:	2200      	movs	r2, #0
 8003266:	6062      	str	r2, [r4, #4]
 8003268:	04d9      	lsls	r1, r3, #19
 800326a:	6922      	ldr	r2, [r4, #16]
 800326c:	6022      	str	r2, [r4, #0]
 800326e:	d504      	bpl.n	800327a <__sflush_r+0x7e>
 8003270:	1c42      	adds	r2, r0, #1
 8003272:	d101      	bne.n	8003278 <__sflush_r+0x7c>
 8003274:	682b      	ldr	r3, [r5, #0]
 8003276:	b903      	cbnz	r3, 800327a <__sflush_r+0x7e>
 8003278:	6560      	str	r0, [r4, #84]	; 0x54
 800327a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800327c:	602f      	str	r7, [r5, #0]
 800327e:	2900      	cmp	r1, #0
 8003280:	d0c9      	beq.n	8003216 <__sflush_r+0x1a>
 8003282:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003286:	4299      	cmp	r1, r3
 8003288:	d002      	beq.n	8003290 <__sflush_r+0x94>
 800328a:	4628      	mov	r0, r5
 800328c:	f7ff feb6 	bl	8002ffc <_free_r>
 8003290:	2000      	movs	r0, #0
 8003292:	6360      	str	r0, [r4, #52]	; 0x34
 8003294:	e7c0      	b.n	8003218 <__sflush_r+0x1c>
 8003296:	2301      	movs	r3, #1
 8003298:	4628      	mov	r0, r5
 800329a:	47b0      	blx	r6
 800329c:	1c41      	adds	r1, r0, #1
 800329e:	d1c8      	bne.n	8003232 <__sflush_r+0x36>
 80032a0:	682b      	ldr	r3, [r5, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0c5      	beq.n	8003232 <__sflush_r+0x36>
 80032a6:	2b1d      	cmp	r3, #29
 80032a8:	d001      	beq.n	80032ae <__sflush_r+0xb2>
 80032aa:	2b16      	cmp	r3, #22
 80032ac:	d101      	bne.n	80032b2 <__sflush_r+0xb6>
 80032ae:	602f      	str	r7, [r5, #0]
 80032b0:	e7b1      	b.n	8003216 <__sflush_r+0x1a>
 80032b2:	89a3      	ldrh	r3, [r4, #12]
 80032b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	e7ad      	b.n	8003218 <__sflush_r+0x1c>
 80032bc:	690f      	ldr	r7, [r1, #16]
 80032be:	2f00      	cmp	r7, #0
 80032c0:	d0a9      	beq.n	8003216 <__sflush_r+0x1a>
 80032c2:	0793      	lsls	r3, r2, #30
 80032c4:	680e      	ldr	r6, [r1, #0]
 80032c6:	bf08      	it	eq
 80032c8:	694b      	ldreq	r3, [r1, #20]
 80032ca:	600f      	str	r7, [r1, #0]
 80032cc:	bf18      	it	ne
 80032ce:	2300      	movne	r3, #0
 80032d0:	eba6 0807 	sub.w	r8, r6, r7
 80032d4:	608b      	str	r3, [r1, #8]
 80032d6:	f1b8 0f00 	cmp.w	r8, #0
 80032da:	dd9c      	ble.n	8003216 <__sflush_r+0x1a>
 80032dc:	6a21      	ldr	r1, [r4, #32]
 80032de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032e0:	4643      	mov	r3, r8
 80032e2:	463a      	mov	r2, r7
 80032e4:	4628      	mov	r0, r5
 80032e6:	47b0      	blx	r6
 80032e8:	2800      	cmp	r0, #0
 80032ea:	dc06      	bgt.n	80032fa <__sflush_r+0xfe>
 80032ec:	89a3      	ldrh	r3, [r4, #12]
 80032ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f2:	81a3      	strh	r3, [r4, #12]
 80032f4:	f04f 30ff 	mov.w	r0, #4294967295
 80032f8:	e78e      	b.n	8003218 <__sflush_r+0x1c>
 80032fa:	4407      	add	r7, r0
 80032fc:	eba8 0800 	sub.w	r8, r8, r0
 8003300:	e7e9      	b.n	80032d6 <__sflush_r+0xda>
 8003302:	bf00      	nop
 8003304:	dfbffffe 	.word	0xdfbffffe

08003308 <_fflush_r>:
 8003308:	b538      	push	{r3, r4, r5, lr}
 800330a:	690b      	ldr	r3, [r1, #16]
 800330c:	4605      	mov	r5, r0
 800330e:	460c      	mov	r4, r1
 8003310:	b913      	cbnz	r3, 8003318 <_fflush_r+0x10>
 8003312:	2500      	movs	r5, #0
 8003314:	4628      	mov	r0, r5
 8003316:	bd38      	pop	{r3, r4, r5, pc}
 8003318:	b118      	cbz	r0, 8003322 <_fflush_r+0x1a>
 800331a:	6a03      	ldr	r3, [r0, #32]
 800331c:	b90b      	cbnz	r3, 8003322 <_fflush_r+0x1a>
 800331e:	f7ff fd59 	bl	8002dd4 <__sinit>
 8003322:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f3      	beq.n	8003312 <_fflush_r+0xa>
 800332a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800332c:	07d0      	lsls	r0, r2, #31
 800332e:	d404      	bmi.n	800333a <_fflush_r+0x32>
 8003330:	0599      	lsls	r1, r3, #22
 8003332:	d402      	bmi.n	800333a <_fflush_r+0x32>
 8003334:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003336:	f7ff fe40 	bl	8002fba <__retarget_lock_acquire_recursive>
 800333a:	4628      	mov	r0, r5
 800333c:	4621      	mov	r1, r4
 800333e:	f7ff ff5d 	bl	80031fc <__sflush_r>
 8003342:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003344:	07da      	lsls	r2, r3, #31
 8003346:	4605      	mov	r5, r0
 8003348:	d4e4      	bmi.n	8003314 <_fflush_r+0xc>
 800334a:	89a3      	ldrh	r3, [r4, #12]
 800334c:	059b      	lsls	r3, r3, #22
 800334e:	d4e1      	bmi.n	8003314 <_fflush_r+0xc>
 8003350:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003352:	f7ff fe33 	bl	8002fbc <__retarget_lock_release_recursive>
 8003356:	e7dd      	b.n	8003314 <_fflush_r+0xc>

08003358 <fiprintf>:
 8003358:	b40e      	push	{r1, r2, r3}
 800335a:	b503      	push	{r0, r1, lr}
 800335c:	4601      	mov	r1, r0
 800335e:	ab03      	add	r3, sp, #12
 8003360:	4805      	ldr	r0, [pc, #20]	; (8003378 <fiprintf+0x20>)
 8003362:	f853 2b04 	ldr.w	r2, [r3], #4
 8003366:	6800      	ldr	r0, [r0, #0]
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	f000 f847 	bl	80033fc <_vfiprintf_r>
 800336e:	b002      	add	sp, #8
 8003370:	f85d eb04 	ldr.w	lr, [sp], #4
 8003374:	b003      	add	sp, #12
 8003376:	4770      	bx	lr
 8003378:	20000064 	.word	0x20000064

0800337c <_sbrk_r>:
 800337c:	b538      	push	{r3, r4, r5, lr}
 800337e:	4d06      	ldr	r5, [pc, #24]	; (8003398 <_sbrk_r+0x1c>)
 8003380:	2300      	movs	r3, #0
 8003382:	4604      	mov	r4, r0
 8003384:	4608      	mov	r0, r1
 8003386:	602b      	str	r3, [r5, #0]
 8003388:	f7fd ffb6 	bl	80012f8 <_sbrk>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d102      	bne.n	8003396 <_sbrk_r+0x1a>
 8003390:	682b      	ldr	r3, [r5, #0]
 8003392:	b103      	cbz	r3, 8003396 <_sbrk_r+0x1a>
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	bd38      	pop	{r3, r4, r5, pc}
 8003398:	20000214 	.word	0x20000214

0800339c <abort>:
 800339c:	b508      	push	{r3, lr}
 800339e:	2006      	movs	r0, #6
 80033a0:	f000 fb94 	bl	8003acc <raise>
 80033a4:	2001      	movs	r0, #1
 80033a6:	f7fd ff2f 	bl	8001208 <_exit>

080033aa <__sfputc_r>:
 80033aa:	6893      	ldr	r3, [r2, #8]
 80033ac:	3b01      	subs	r3, #1
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	b410      	push	{r4}
 80033b2:	6093      	str	r3, [r2, #8]
 80033b4:	da08      	bge.n	80033c8 <__sfputc_r+0x1e>
 80033b6:	6994      	ldr	r4, [r2, #24]
 80033b8:	42a3      	cmp	r3, r4
 80033ba:	db01      	blt.n	80033c0 <__sfputc_r+0x16>
 80033bc:	290a      	cmp	r1, #10
 80033be:	d103      	bne.n	80033c8 <__sfputc_r+0x1e>
 80033c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033c4:	f000 bac4 	b.w	8003950 <__swbuf_r>
 80033c8:	6813      	ldr	r3, [r2, #0]
 80033ca:	1c58      	adds	r0, r3, #1
 80033cc:	6010      	str	r0, [r2, #0]
 80033ce:	7019      	strb	r1, [r3, #0]
 80033d0:	4608      	mov	r0, r1
 80033d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <__sfputs_r>:
 80033d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033da:	4606      	mov	r6, r0
 80033dc:	460f      	mov	r7, r1
 80033de:	4614      	mov	r4, r2
 80033e0:	18d5      	adds	r5, r2, r3
 80033e2:	42ac      	cmp	r4, r5
 80033e4:	d101      	bne.n	80033ea <__sfputs_r+0x12>
 80033e6:	2000      	movs	r0, #0
 80033e8:	e007      	b.n	80033fa <__sfputs_r+0x22>
 80033ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80033ee:	463a      	mov	r2, r7
 80033f0:	4630      	mov	r0, r6
 80033f2:	f7ff ffda 	bl	80033aa <__sfputc_r>
 80033f6:	1c43      	adds	r3, r0, #1
 80033f8:	d1f3      	bne.n	80033e2 <__sfputs_r+0xa>
 80033fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033fc <_vfiprintf_r>:
 80033fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003400:	460d      	mov	r5, r1
 8003402:	b09d      	sub	sp, #116	; 0x74
 8003404:	4614      	mov	r4, r2
 8003406:	4698      	mov	r8, r3
 8003408:	4606      	mov	r6, r0
 800340a:	b118      	cbz	r0, 8003414 <_vfiprintf_r+0x18>
 800340c:	6a03      	ldr	r3, [r0, #32]
 800340e:	b90b      	cbnz	r3, 8003414 <_vfiprintf_r+0x18>
 8003410:	f7ff fce0 	bl	8002dd4 <__sinit>
 8003414:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003416:	07d9      	lsls	r1, r3, #31
 8003418:	d405      	bmi.n	8003426 <_vfiprintf_r+0x2a>
 800341a:	89ab      	ldrh	r3, [r5, #12]
 800341c:	059a      	lsls	r2, r3, #22
 800341e:	d402      	bmi.n	8003426 <_vfiprintf_r+0x2a>
 8003420:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003422:	f7ff fdca 	bl	8002fba <__retarget_lock_acquire_recursive>
 8003426:	89ab      	ldrh	r3, [r5, #12]
 8003428:	071b      	lsls	r3, r3, #28
 800342a:	d501      	bpl.n	8003430 <_vfiprintf_r+0x34>
 800342c:	692b      	ldr	r3, [r5, #16]
 800342e:	b99b      	cbnz	r3, 8003458 <_vfiprintf_r+0x5c>
 8003430:	4629      	mov	r1, r5
 8003432:	4630      	mov	r0, r6
 8003434:	f000 faca 	bl	80039cc <__swsetup_r>
 8003438:	b170      	cbz	r0, 8003458 <_vfiprintf_r+0x5c>
 800343a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800343c:	07dc      	lsls	r4, r3, #31
 800343e:	d504      	bpl.n	800344a <_vfiprintf_r+0x4e>
 8003440:	f04f 30ff 	mov.w	r0, #4294967295
 8003444:	b01d      	add	sp, #116	; 0x74
 8003446:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800344a:	89ab      	ldrh	r3, [r5, #12]
 800344c:	0598      	lsls	r0, r3, #22
 800344e:	d4f7      	bmi.n	8003440 <_vfiprintf_r+0x44>
 8003450:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003452:	f7ff fdb3 	bl	8002fbc <__retarget_lock_release_recursive>
 8003456:	e7f3      	b.n	8003440 <_vfiprintf_r+0x44>
 8003458:	2300      	movs	r3, #0
 800345a:	9309      	str	r3, [sp, #36]	; 0x24
 800345c:	2320      	movs	r3, #32
 800345e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003462:	f8cd 800c 	str.w	r8, [sp, #12]
 8003466:	2330      	movs	r3, #48	; 0x30
 8003468:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800361c <_vfiprintf_r+0x220>
 800346c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003470:	f04f 0901 	mov.w	r9, #1
 8003474:	4623      	mov	r3, r4
 8003476:	469a      	mov	sl, r3
 8003478:	f813 2b01 	ldrb.w	r2, [r3], #1
 800347c:	b10a      	cbz	r2, 8003482 <_vfiprintf_r+0x86>
 800347e:	2a25      	cmp	r2, #37	; 0x25
 8003480:	d1f9      	bne.n	8003476 <_vfiprintf_r+0x7a>
 8003482:	ebba 0b04 	subs.w	fp, sl, r4
 8003486:	d00b      	beq.n	80034a0 <_vfiprintf_r+0xa4>
 8003488:	465b      	mov	r3, fp
 800348a:	4622      	mov	r2, r4
 800348c:	4629      	mov	r1, r5
 800348e:	4630      	mov	r0, r6
 8003490:	f7ff ffa2 	bl	80033d8 <__sfputs_r>
 8003494:	3001      	adds	r0, #1
 8003496:	f000 80a9 	beq.w	80035ec <_vfiprintf_r+0x1f0>
 800349a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800349c:	445a      	add	r2, fp
 800349e:	9209      	str	r2, [sp, #36]	; 0x24
 80034a0:	f89a 3000 	ldrb.w	r3, [sl]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a1 	beq.w	80035ec <_vfiprintf_r+0x1f0>
 80034aa:	2300      	movs	r3, #0
 80034ac:	f04f 32ff 	mov.w	r2, #4294967295
 80034b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80034b4:	f10a 0a01 	add.w	sl, sl, #1
 80034b8:	9304      	str	r3, [sp, #16]
 80034ba:	9307      	str	r3, [sp, #28]
 80034bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80034c0:	931a      	str	r3, [sp, #104]	; 0x68
 80034c2:	4654      	mov	r4, sl
 80034c4:	2205      	movs	r2, #5
 80034c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80034ca:	4854      	ldr	r0, [pc, #336]	; (800361c <_vfiprintf_r+0x220>)
 80034cc:	f7fc fea0 	bl	8000210 <memchr>
 80034d0:	9a04      	ldr	r2, [sp, #16]
 80034d2:	b9d8      	cbnz	r0, 800350c <_vfiprintf_r+0x110>
 80034d4:	06d1      	lsls	r1, r2, #27
 80034d6:	bf44      	itt	mi
 80034d8:	2320      	movmi	r3, #32
 80034da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034de:	0713      	lsls	r3, r2, #28
 80034e0:	bf44      	itt	mi
 80034e2:	232b      	movmi	r3, #43	; 0x2b
 80034e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80034e8:	f89a 3000 	ldrb.w	r3, [sl]
 80034ec:	2b2a      	cmp	r3, #42	; 0x2a
 80034ee:	d015      	beq.n	800351c <_vfiprintf_r+0x120>
 80034f0:	9a07      	ldr	r2, [sp, #28]
 80034f2:	4654      	mov	r4, sl
 80034f4:	2000      	movs	r0, #0
 80034f6:	f04f 0c0a 	mov.w	ip, #10
 80034fa:	4621      	mov	r1, r4
 80034fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003500:	3b30      	subs	r3, #48	; 0x30
 8003502:	2b09      	cmp	r3, #9
 8003504:	d94d      	bls.n	80035a2 <_vfiprintf_r+0x1a6>
 8003506:	b1b0      	cbz	r0, 8003536 <_vfiprintf_r+0x13a>
 8003508:	9207      	str	r2, [sp, #28]
 800350a:	e014      	b.n	8003536 <_vfiprintf_r+0x13a>
 800350c:	eba0 0308 	sub.w	r3, r0, r8
 8003510:	fa09 f303 	lsl.w	r3, r9, r3
 8003514:	4313      	orrs	r3, r2
 8003516:	9304      	str	r3, [sp, #16]
 8003518:	46a2      	mov	sl, r4
 800351a:	e7d2      	b.n	80034c2 <_vfiprintf_r+0xc6>
 800351c:	9b03      	ldr	r3, [sp, #12]
 800351e:	1d19      	adds	r1, r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	9103      	str	r1, [sp, #12]
 8003524:	2b00      	cmp	r3, #0
 8003526:	bfbb      	ittet	lt
 8003528:	425b      	neglt	r3, r3
 800352a:	f042 0202 	orrlt.w	r2, r2, #2
 800352e:	9307      	strge	r3, [sp, #28]
 8003530:	9307      	strlt	r3, [sp, #28]
 8003532:	bfb8      	it	lt
 8003534:	9204      	strlt	r2, [sp, #16]
 8003536:	7823      	ldrb	r3, [r4, #0]
 8003538:	2b2e      	cmp	r3, #46	; 0x2e
 800353a:	d10c      	bne.n	8003556 <_vfiprintf_r+0x15a>
 800353c:	7863      	ldrb	r3, [r4, #1]
 800353e:	2b2a      	cmp	r3, #42	; 0x2a
 8003540:	d134      	bne.n	80035ac <_vfiprintf_r+0x1b0>
 8003542:	9b03      	ldr	r3, [sp, #12]
 8003544:	1d1a      	adds	r2, r3, #4
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	9203      	str	r2, [sp, #12]
 800354a:	2b00      	cmp	r3, #0
 800354c:	bfb8      	it	lt
 800354e:	f04f 33ff 	movlt.w	r3, #4294967295
 8003552:	3402      	adds	r4, #2
 8003554:	9305      	str	r3, [sp, #20]
 8003556:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800362c <_vfiprintf_r+0x230>
 800355a:	7821      	ldrb	r1, [r4, #0]
 800355c:	2203      	movs	r2, #3
 800355e:	4650      	mov	r0, sl
 8003560:	f7fc fe56 	bl	8000210 <memchr>
 8003564:	b138      	cbz	r0, 8003576 <_vfiprintf_r+0x17a>
 8003566:	9b04      	ldr	r3, [sp, #16]
 8003568:	eba0 000a 	sub.w	r0, r0, sl
 800356c:	2240      	movs	r2, #64	; 0x40
 800356e:	4082      	lsls	r2, r0
 8003570:	4313      	orrs	r3, r2
 8003572:	3401      	adds	r4, #1
 8003574:	9304      	str	r3, [sp, #16]
 8003576:	f814 1b01 	ldrb.w	r1, [r4], #1
 800357a:	4829      	ldr	r0, [pc, #164]	; (8003620 <_vfiprintf_r+0x224>)
 800357c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003580:	2206      	movs	r2, #6
 8003582:	f7fc fe45 	bl	8000210 <memchr>
 8003586:	2800      	cmp	r0, #0
 8003588:	d03f      	beq.n	800360a <_vfiprintf_r+0x20e>
 800358a:	4b26      	ldr	r3, [pc, #152]	; (8003624 <_vfiprintf_r+0x228>)
 800358c:	bb1b      	cbnz	r3, 80035d6 <_vfiprintf_r+0x1da>
 800358e:	9b03      	ldr	r3, [sp, #12]
 8003590:	3307      	adds	r3, #7
 8003592:	f023 0307 	bic.w	r3, r3, #7
 8003596:	3308      	adds	r3, #8
 8003598:	9303      	str	r3, [sp, #12]
 800359a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800359c:	443b      	add	r3, r7
 800359e:	9309      	str	r3, [sp, #36]	; 0x24
 80035a0:	e768      	b.n	8003474 <_vfiprintf_r+0x78>
 80035a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80035a6:	460c      	mov	r4, r1
 80035a8:	2001      	movs	r0, #1
 80035aa:	e7a6      	b.n	80034fa <_vfiprintf_r+0xfe>
 80035ac:	2300      	movs	r3, #0
 80035ae:	3401      	adds	r4, #1
 80035b0:	9305      	str	r3, [sp, #20]
 80035b2:	4619      	mov	r1, r3
 80035b4:	f04f 0c0a 	mov.w	ip, #10
 80035b8:	4620      	mov	r0, r4
 80035ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80035be:	3a30      	subs	r2, #48	; 0x30
 80035c0:	2a09      	cmp	r2, #9
 80035c2:	d903      	bls.n	80035cc <_vfiprintf_r+0x1d0>
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d0c6      	beq.n	8003556 <_vfiprintf_r+0x15a>
 80035c8:	9105      	str	r1, [sp, #20]
 80035ca:	e7c4      	b.n	8003556 <_vfiprintf_r+0x15a>
 80035cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80035d0:	4604      	mov	r4, r0
 80035d2:	2301      	movs	r3, #1
 80035d4:	e7f0      	b.n	80035b8 <_vfiprintf_r+0x1bc>
 80035d6:	ab03      	add	r3, sp, #12
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	462a      	mov	r2, r5
 80035dc:	4b12      	ldr	r3, [pc, #72]	; (8003628 <_vfiprintf_r+0x22c>)
 80035de:	a904      	add	r1, sp, #16
 80035e0:	4630      	mov	r0, r6
 80035e2:	f3af 8000 	nop.w
 80035e6:	4607      	mov	r7, r0
 80035e8:	1c78      	adds	r0, r7, #1
 80035ea:	d1d6      	bne.n	800359a <_vfiprintf_r+0x19e>
 80035ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80035ee:	07d9      	lsls	r1, r3, #31
 80035f0:	d405      	bmi.n	80035fe <_vfiprintf_r+0x202>
 80035f2:	89ab      	ldrh	r3, [r5, #12]
 80035f4:	059a      	lsls	r2, r3, #22
 80035f6:	d402      	bmi.n	80035fe <_vfiprintf_r+0x202>
 80035f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80035fa:	f7ff fcdf 	bl	8002fbc <__retarget_lock_release_recursive>
 80035fe:	89ab      	ldrh	r3, [r5, #12]
 8003600:	065b      	lsls	r3, r3, #25
 8003602:	f53f af1d 	bmi.w	8003440 <_vfiprintf_r+0x44>
 8003606:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003608:	e71c      	b.n	8003444 <_vfiprintf_r+0x48>
 800360a:	ab03      	add	r3, sp, #12
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	462a      	mov	r2, r5
 8003610:	4b05      	ldr	r3, [pc, #20]	; (8003628 <_vfiprintf_r+0x22c>)
 8003612:	a904      	add	r1, sp, #16
 8003614:	4630      	mov	r0, r6
 8003616:	f000 f879 	bl	800370c <_printf_i>
 800361a:	e7e4      	b.n	80035e6 <_vfiprintf_r+0x1ea>
 800361c:	08003ce7 	.word	0x08003ce7
 8003620:	08003cf1 	.word	0x08003cf1
 8003624:	00000000 	.word	0x00000000
 8003628:	080033d9 	.word	0x080033d9
 800362c:	08003ced 	.word	0x08003ced

08003630 <_printf_common>:
 8003630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003634:	4616      	mov	r6, r2
 8003636:	4699      	mov	r9, r3
 8003638:	688a      	ldr	r2, [r1, #8]
 800363a:	690b      	ldr	r3, [r1, #16]
 800363c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003640:	4293      	cmp	r3, r2
 8003642:	bfb8      	it	lt
 8003644:	4613      	movlt	r3, r2
 8003646:	6033      	str	r3, [r6, #0]
 8003648:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800364c:	4607      	mov	r7, r0
 800364e:	460c      	mov	r4, r1
 8003650:	b10a      	cbz	r2, 8003656 <_printf_common+0x26>
 8003652:	3301      	adds	r3, #1
 8003654:	6033      	str	r3, [r6, #0]
 8003656:	6823      	ldr	r3, [r4, #0]
 8003658:	0699      	lsls	r1, r3, #26
 800365a:	bf42      	ittt	mi
 800365c:	6833      	ldrmi	r3, [r6, #0]
 800365e:	3302      	addmi	r3, #2
 8003660:	6033      	strmi	r3, [r6, #0]
 8003662:	6825      	ldr	r5, [r4, #0]
 8003664:	f015 0506 	ands.w	r5, r5, #6
 8003668:	d106      	bne.n	8003678 <_printf_common+0x48>
 800366a:	f104 0a19 	add.w	sl, r4, #25
 800366e:	68e3      	ldr	r3, [r4, #12]
 8003670:	6832      	ldr	r2, [r6, #0]
 8003672:	1a9b      	subs	r3, r3, r2
 8003674:	42ab      	cmp	r3, r5
 8003676:	dc26      	bgt.n	80036c6 <_printf_common+0x96>
 8003678:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800367c:	1e13      	subs	r3, r2, #0
 800367e:	6822      	ldr	r2, [r4, #0]
 8003680:	bf18      	it	ne
 8003682:	2301      	movne	r3, #1
 8003684:	0692      	lsls	r2, r2, #26
 8003686:	d42b      	bmi.n	80036e0 <_printf_common+0xb0>
 8003688:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800368c:	4649      	mov	r1, r9
 800368e:	4638      	mov	r0, r7
 8003690:	47c0      	blx	r8
 8003692:	3001      	adds	r0, #1
 8003694:	d01e      	beq.n	80036d4 <_printf_common+0xa4>
 8003696:	6823      	ldr	r3, [r4, #0]
 8003698:	6922      	ldr	r2, [r4, #16]
 800369a:	f003 0306 	and.w	r3, r3, #6
 800369e:	2b04      	cmp	r3, #4
 80036a0:	bf02      	ittt	eq
 80036a2:	68e5      	ldreq	r5, [r4, #12]
 80036a4:	6833      	ldreq	r3, [r6, #0]
 80036a6:	1aed      	subeq	r5, r5, r3
 80036a8:	68a3      	ldr	r3, [r4, #8]
 80036aa:	bf0c      	ite	eq
 80036ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80036b0:	2500      	movne	r5, #0
 80036b2:	4293      	cmp	r3, r2
 80036b4:	bfc4      	itt	gt
 80036b6:	1a9b      	subgt	r3, r3, r2
 80036b8:	18ed      	addgt	r5, r5, r3
 80036ba:	2600      	movs	r6, #0
 80036bc:	341a      	adds	r4, #26
 80036be:	42b5      	cmp	r5, r6
 80036c0:	d11a      	bne.n	80036f8 <_printf_common+0xc8>
 80036c2:	2000      	movs	r0, #0
 80036c4:	e008      	b.n	80036d8 <_printf_common+0xa8>
 80036c6:	2301      	movs	r3, #1
 80036c8:	4652      	mov	r2, sl
 80036ca:	4649      	mov	r1, r9
 80036cc:	4638      	mov	r0, r7
 80036ce:	47c0      	blx	r8
 80036d0:	3001      	adds	r0, #1
 80036d2:	d103      	bne.n	80036dc <_printf_common+0xac>
 80036d4:	f04f 30ff 	mov.w	r0, #4294967295
 80036d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80036dc:	3501      	adds	r5, #1
 80036de:	e7c6      	b.n	800366e <_printf_common+0x3e>
 80036e0:	18e1      	adds	r1, r4, r3
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	2030      	movs	r0, #48	; 0x30
 80036e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80036ea:	4422      	add	r2, r4
 80036ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80036f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80036f4:	3302      	adds	r3, #2
 80036f6:	e7c7      	b.n	8003688 <_printf_common+0x58>
 80036f8:	2301      	movs	r3, #1
 80036fa:	4622      	mov	r2, r4
 80036fc:	4649      	mov	r1, r9
 80036fe:	4638      	mov	r0, r7
 8003700:	47c0      	blx	r8
 8003702:	3001      	adds	r0, #1
 8003704:	d0e6      	beq.n	80036d4 <_printf_common+0xa4>
 8003706:	3601      	adds	r6, #1
 8003708:	e7d9      	b.n	80036be <_printf_common+0x8e>
	...

0800370c <_printf_i>:
 800370c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003710:	7e0f      	ldrb	r7, [r1, #24]
 8003712:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003714:	2f78      	cmp	r7, #120	; 0x78
 8003716:	4691      	mov	r9, r2
 8003718:	4680      	mov	r8, r0
 800371a:	460c      	mov	r4, r1
 800371c:	469a      	mov	sl, r3
 800371e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003722:	d807      	bhi.n	8003734 <_printf_i+0x28>
 8003724:	2f62      	cmp	r7, #98	; 0x62
 8003726:	d80a      	bhi.n	800373e <_printf_i+0x32>
 8003728:	2f00      	cmp	r7, #0
 800372a:	f000 80d4 	beq.w	80038d6 <_printf_i+0x1ca>
 800372e:	2f58      	cmp	r7, #88	; 0x58
 8003730:	f000 80c0 	beq.w	80038b4 <_printf_i+0x1a8>
 8003734:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003738:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800373c:	e03a      	b.n	80037b4 <_printf_i+0xa8>
 800373e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003742:	2b15      	cmp	r3, #21
 8003744:	d8f6      	bhi.n	8003734 <_printf_i+0x28>
 8003746:	a101      	add	r1, pc, #4	; (adr r1, 800374c <_printf_i+0x40>)
 8003748:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800374c:	080037a5 	.word	0x080037a5
 8003750:	080037b9 	.word	0x080037b9
 8003754:	08003735 	.word	0x08003735
 8003758:	08003735 	.word	0x08003735
 800375c:	08003735 	.word	0x08003735
 8003760:	08003735 	.word	0x08003735
 8003764:	080037b9 	.word	0x080037b9
 8003768:	08003735 	.word	0x08003735
 800376c:	08003735 	.word	0x08003735
 8003770:	08003735 	.word	0x08003735
 8003774:	08003735 	.word	0x08003735
 8003778:	080038bd 	.word	0x080038bd
 800377c:	080037e5 	.word	0x080037e5
 8003780:	08003877 	.word	0x08003877
 8003784:	08003735 	.word	0x08003735
 8003788:	08003735 	.word	0x08003735
 800378c:	080038df 	.word	0x080038df
 8003790:	08003735 	.word	0x08003735
 8003794:	080037e5 	.word	0x080037e5
 8003798:	08003735 	.word	0x08003735
 800379c:	08003735 	.word	0x08003735
 80037a0:	0800387f 	.word	0x0800387f
 80037a4:	682b      	ldr	r3, [r5, #0]
 80037a6:	1d1a      	adds	r2, r3, #4
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	602a      	str	r2, [r5, #0]
 80037ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037b4:	2301      	movs	r3, #1
 80037b6:	e09f      	b.n	80038f8 <_printf_i+0x1ec>
 80037b8:	6820      	ldr	r0, [r4, #0]
 80037ba:	682b      	ldr	r3, [r5, #0]
 80037bc:	0607      	lsls	r7, r0, #24
 80037be:	f103 0104 	add.w	r1, r3, #4
 80037c2:	6029      	str	r1, [r5, #0]
 80037c4:	d501      	bpl.n	80037ca <_printf_i+0xbe>
 80037c6:	681e      	ldr	r6, [r3, #0]
 80037c8:	e003      	b.n	80037d2 <_printf_i+0xc6>
 80037ca:	0646      	lsls	r6, r0, #25
 80037cc:	d5fb      	bpl.n	80037c6 <_printf_i+0xba>
 80037ce:	f9b3 6000 	ldrsh.w	r6, [r3]
 80037d2:	2e00      	cmp	r6, #0
 80037d4:	da03      	bge.n	80037de <_printf_i+0xd2>
 80037d6:	232d      	movs	r3, #45	; 0x2d
 80037d8:	4276      	negs	r6, r6
 80037da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037de:	485a      	ldr	r0, [pc, #360]	; (8003948 <_printf_i+0x23c>)
 80037e0:	230a      	movs	r3, #10
 80037e2:	e012      	b.n	800380a <_printf_i+0xfe>
 80037e4:	682b      	ldr	r3, [r5, #0]
 80037e6:	6820      	ldr	r0, [r4, #0]
 80037e8:	1d19      	adds	r1, r3, #4
 80037ea:	6029      	str	r1, [r5, #0]
 80037ec:	0605      	lsls	r5, r0, #24
 80037ee:	d501      	bpl.n	80037f4 <_printf_i+0xe8>
 80037f0:	681e      	ldr	r6, [r3, #0]
 80037f2:	e002      	b.n	80037fa <_printf_i+0xee>
 80037f4:	0641      	lsls	r1, r0, #25
 80037f6:	d5fb      	bpl.n	80037f0 <_printf_i+0xe4>
 80037f8:	881e      	ldrh	r6, [r3, #0]
 80037fa:	4853      	ldr	r0, [pc, #332]	; (8003948 <_printf_i+0x23c>)
 80037fc:	2f6f      	cmp	r7, #111	; 0x6f
 80037fe:	bf0c      	ite	eq
 8003800:	2308      	moveq	r3, #8
 8003802:	230a      	movne	r3, #10
 8003804:	2100      	movs	r1, #0
 8003806:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800380a:	6865      	ldr	r5, [r4, #4]
 800380c:	60a5      	str	r5, [r4, #8]
 800380e:	2d00      	cmp	r5, #0
 8003810:	bfa2      	ittt	ge
 8003812:	6821      	ldrge	r1, [r4, #0]
 8003814:	f021 0104 	bicge.w	r1, r1, #4
 8003818:	6021      	strge	r1, [r4, #0]
 800381a:	b90e      	cbnz	r6, 8003820 <_printf_i+0x114>
 800381c:	2d00      	cmp	r5, #0
 800381e:	d04b      	beq.n	80038b8 <_printf_i+0x1ac>
 8003820:	4615      	mov	r5, r2
 8003822:	fbb6 f1f3 	udiv	r1, r6, r3
 8003826:	fb03 6711 	mls	r7, r3, r1, r6
 800382a:	5dc7      	ldrb	r7, [r0, r7]
 800382c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003830:	4637      	mov	r7, r6
 8003832:	42bb      	cmp	r3, r7
 8003834:	460e      	mov	r6, r1
 8003836:	d9f4      	bls.n	8003822 <_printf_i+0x116>
 8003838:	2b08      	cmp	r3, #8
 800383a:	d10b      	bne.n	8003854 <_printf_i+0x148>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	07de      	lsls	r6, r3, #31
 8003840:	d508      	bpl.n	8003854 <_printf_i+0x148>
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	6861      	ldr	r1, [r4, #4]
 8003846:	4299      	cmp	r1, r3
 8003848:	bfde      	ittt	le
 800384a:	2330      	movle	r3, #48	; 0x30
 800384c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003850:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003854:	1b52      	subs	r2, r2, r5
 8003856:	6122      	str	r2, [r4, #16]
 8003858:	f8cd a000 	str.w	sl, [sp]
 800385c:	464b      	mov	r3, r9
 800385e:	aa03      	add	r2, sp, #12
 8003860:	4621      	mov	r1, r4
 8003862:	4640      	mov	r0, r8
 8003864:	f7ff fee4 	bl	8003630 <_printf_common>
 8003868:	3001      	adds	r0, #1
 800386a:	d14a      	bne.n	8003902 <_printf_i+0x1f6>
 800386c:	f04f 30ff 	mov.w	r0, #4294967295
 8003870:	b004      	add	sp, #16
 8003872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003876:	6823      	ldr	r3, [r4, #0]
 8003878:	f043 0320 	orr.w	r3, r3, #32
 800387c:	6023      	str	r3, [r4, #0]
 800387e:	4833      	ldr	r0, [pc, #204]	; (800394c <_printf_i+0x240>)
 8003880:	2778      	movs	r7, #120	; 0x78
 8003882:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8003886:	6823      	ldr	r3, [r4, #0]
 8003888:	6829      	ldr	r1, [r5, #0]
 800388a:	061f      	lsls	r7, r3, #24
 800388c:	f851 6b04 	ldr.w	r6, [r1], #4
 8003890:	d402      	bmi.n	8003898 <_printf_i+0x18c>
 8003892:	065f      	lsls	r7, r3, #25
 8003894:	bf48      	it	mi
 8003896:	b2b6      	uxthmi	r6, r6
 8003898:	07df      	lsls	r7, r3, #31
 800389a:	bf48      	it	mi
 800389c:	f043 0320 	orrmi.w	r3, r3, #32
 80038a0:	6029      	str	r1, [r5, #0]
 80038a2:	bf48      	it	mi
 80038a4:	6023      	strmi	r3, [r4, #0]
 80038a6:	b91e      	cbnz	r6, 80038b0 <_printf_i+0x1a4>
 80038a8:	6823      	ldr	r3, [r4, #0]
 80038aa:	f023 0320 	bic.w	r3, r3, #32
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	2310      	movs	r3, #16
 80038b2:	e7a7      	b.n	8003804 <_printf_i+0xf8>
 80038b4:	4824      	ldr	r0, [pc, #144]	; (8003948 <_printf_i+0x23c>)
 80038b6:	e7e4      	b.n	8003882 <_printf_i+0x176>
 80038b8:	4615      	mov	r5, r2
 80038ba:	e7bd      	b.n	8003838 <_printf_i+0x12c>
 80038bc:	682b      	ldr	r3, [r5, #0]
 80038be:	6826      	ldr	r6, [r4, #0]
 80038c0:	6961      	ldr	r1, [r4, #20]
 80038c2:	1d18      	adds	r0, r3, #4
 80038c4:	6028      	str	r0, [r5, #0]
 80038c6:	0635      	lsls	r5, r6, #24
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	d501      	bpl.n	80038d0 <_printf_i+0x1c4>
 80038cc:	6019      	str	r1, [r3, #0]
 80038ce:	e002      	b.n	80038d6 <_printf_i+0x1ca>
 80038d0:	0670      	lsls	r0, r6, #25
 80038d2:	d5fb      	bpl.n	80038cc <_printf_i+0x1c0>
 80038d4:	8019      	strh	r1, [r3, #0]
 80038d6:	2300      	movs	r3, #0
 80038d8:	6123      	str	r3, [r4, #16]
 80038da:	4615      	mov	r5, r2
 80038dc:	e7bc      	b.n	8003858 <_printf_i+0x14c>
 80038de:	682b      	ldr	r3, [r5, #0]
 80038e0:	1d1a      	adds	r2, r3, #4
 80038e2:	602a      	str	r2, [r5, #0]
 80038e4:	681d      	ldr	r5, [r3, #0]
 80038e6:	6862      	ldr	r2, [r4, #4]
 80038e8:	2100      	movs	r1, #0
 80038ea:	4628      	mov	r0, r5
 80038ec:	f7fc fc90 	bl	8000210 <memchr>
 80038f0:	b108      	cbz	r0, 80038f6 <_printf_i+0x1ea>
 80038f2:	1b40      	subs	r0, r0, r5
 80038f4:	6060      	str	r0, [r4, #4]
 80038f6:	6863      	ldr	r3, [r4, #4]
 80038f8:	6123      	str	r3, [r4, #16]
 80038fa:	2300      	movs	r3, #0
 80038fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003900:	e7aa      	b.n	8003858 <_printf_i+0x14c>
 8003902:	6923      	ldr	r3, [r4, #16]
 8003904:	462a      	mov	r2, r5
 8003906:	4649      	mov	r1, r9
 8003908:	4640      	mov	r0, r8
 800390a:	47d0      	blx	sl
 800390c:	3001      	adds	r0, #1
 800390e:	d0ad      	beq.n	800386c <_printf_i+0x160>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	079b      	lsls	r3, r3, #30
 8003914:	d413      	bmi.n	800393e <_printf_i+0x232>
 8003916:	68e0      	ldr	r0, [r4, #12]
 8003918:	9b03      	ldr	r3, [sp, #12]
 800391a:	4298      	cmp	r0, r3
 800391c:	bfb8      	it	lt
 800391e:	4618      	movlt	r0, r3
 8003920:	e7a6      	b.n	8003870 <_printf_i+0x164>
 8003922:	2301      	movs	r3, #1
 8003924:	4632      	mov	r2, r6
 8003926:	4649      	mov	r1, r9
 8003928:	4640      	mov	r0, r8
 800392a:	47d0      	blx	sl
 800392c:	3001      	adds	r0, #1
 800392e:	d09d      	beq.n	800386c <_printf_i+0x160>
 8003930:	3501      	adds	r5, #1
 8003932:	68e3      	ldr	r3, [r4, #12]
 8003934:	9903      	ldr	r1, [sp, #12]
 8003936:	1a5b      	subs	r3, r3, r1
 8003938:	42ab      	cmp	r3, r5
 800393a:	dcf2      	bgt.n	8003922 <_printf_i+0x216>
 800393c:	e7eb      	b.n	8003916 <_printf_i+0x20a>
 800393e:	2500      	movs	r5, #0
 8003940:	f104 0619 	add.w	r6, r4, #25
 8003944:	e7f5      	b.n	8003932 <_printf_i+0x226>
 8003946:	bf00      	nop
 8003948:	08003cf8 	.word	0x08003cf8
 800394c:	08003d09 	.word	0x08003d09

08003950 <__swbuf_r>:
 8003950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003952:	460e      	mov	r6, r1
 8003954:	4614      	mov	r4, r2
 8003956:	4605      	mov	r5, r0
 8003958:	b118      	cbz	r0, 8003962 <__swbuf_r+0x12>
 800395a:	6a03      	ldr	r3, [r0, #32]
 800395c:	b90b      	cbnz	r3, 8003962 <__swbuf_r+0x12>
 800395e:	f7ff fa39 	bl	8002dd4 <__sinit>
 8003962:	69a3      	ldr	r3, [r4, #24]
 8003964:	60a3      	str	r3, [r4, #8]
 8003966:	89a3      	ldrh	r3, [r4, #12]
 8003968:	071a      	lsls	r2, r3, #28
 800396a:	d525      	bpl.n	80039b8 <__swbuf_r+0x68>
 800396c:	6923      	ldr	r3, [r4, #16]
 800396e:	b31b      	cbz	r3, 80039b8 <__swbuf_r+0x68>
 8003970:	6823      	ldr	r3, [r4, #0]
 8003972:	6922      	ldr	r2, [r4, #16]
 8003974:	1a98      	subs	r0, r3, r2
 8003976:	6963      	ldr	r3, [r4, #20]
 8003978:	b2f6      	uxtb	r6, r6
 800397a:	4283      	cmp	r3, r0
 800397c:	4637      	mov	r7, r6
 800397e:	dc04      	bgt.n	800398a <__swbuf_r+0x3a>
 8003980:	4621      	mov	r1, r4
 8003982:	4628      	mov	r0, r5
 8003984:	f7ff fcc0 	bl	8003308 <_fflush_r>
 8003988:	b9e0      	cbnz	r0, 80039c4 <__swbuf_r+0x74>
 800398a:	68a3      	ldr	r3, [r4, #8]
 800398c:	3b01      	subs	r3, #1
 800398e:	60a3      	str	r3, [r4, #8]
 8003990:	6823      	ldr	r3, [r4, #0]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	6022      	str	r2, [r4, #0]
 8003996:	701e      	strb	r6, [r3, #0]
 8003998:	6962      	ldr	r2, [r4, #20]
 800399a:	1c43      	adds	r3, r0, #1
 800399c:	429a      	cmp	r2, r3
 800399e:	d004      	beq.n	80039aa <__swbuf_r+0x5a>
 80039a0:	89a3      	ldrh	r3, [r4, #12]
 80039a2:	07db      	lsls	r3, r3, #31
 80039a4:	d506      	bpl.n	80039b4 <__swbuf_r+0x64>
 80039a6:	2e0a      	cmp	r6, #10
 80039a8:	d104      	bne.n	80039b4 <__swbuf_r+0x64>
 80039aa:	4621      	mov	r1, r4
 80039ac:	4628      	mov	r0, r5
 80039ae:	f7ff fcab 	bl	8003308 <_fflush_r>
 80039b2:	b938      	cbnz	r0, 80039c4 <__swbuf_r+0x74>
 80039b4:	4638      	mov	r0, r7
 80039b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b8:	4621      	mov	r1, r4
 80039ba:	4628      	mov	r0, r5
 80039bc:	f000 f806 	bl	80039cc <__swsetup_r>
 80039c0:	2800      	cmp	r0, #0
 80039c2:	d0d5      	beq.n	8003970 <__swbuf_r+0x20>
 80039c4:	f04f 37ff 	mov.w	r7, #4294967295
 80039c8:	e7f4      	b.n	80039b4 <__swbuf_r+0x64>
	...

080039cc <__swsetup_r>:
 80039cc:	b538      	push	{r3, r4, r5, lr}
 80039ce:	4b2a      	ldr	r3, [pc, #168]	; (8003a78 <__swsetup_r+0xac>)
 80039d0:	4605      	mov	r5, r0
 80039d2:	6818      	ldr	r0, [r3, #0]
 80039d4:	460c      	mov	r4, r1
 80039d6:	b118      	cbz	r0, 80039e0 <__swsetup_r+0x14>
 80039d8:	6a03      	ldr	r3, [r0, #32]
 80039da:	b90b      	cbnz	r3, 80039e0 <__swsetup_r+0x14>
 80039dc:	f7ff f9fa 	bl	8002dd4 <__sinit>
 80039e0:	89a3      	ldrh	r3, [r4, #12]
 80039e2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80039e6:	0718      	lsls	r0, r3, #28
 80039e8:	d422      	bmi.n	8003a30 <__swsetup_r+0x64>
 80039ea:	06d9      	lsls	r1, r3, #27
 80039ec:	d407      	bmi.n	80039fe <__swsetup_r+0x32>
 80039ee:	2309      	movs	r3, #9
 80039f0:	602b      	str	r3, [r5, #0]
 80039f2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80039f6:	81a3      	strh	r3, [r4, #12]
 80039f8:	f04f 30ff 	mov.w	r0, #4294967295
 80039fc:	e034      	b.n	8003a68 <__swsetup_r+0x9c>
 80039fe:	0758      	lsls	r0, r3, #29
 8003a00:	d512      	bpl.n	8003a28 <__swsetup_r+0x5c>
 8003a02:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003a04:	b141      	cbz	r1, 8003a18 <__swsetup_r+0x4c>
 8003a06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003a0a:	4299      	cmp	r1, r3
 8003a0c:	d002      	beq.n	8003a14 <__swsetup_r+0x48>
 8003a0e:	4628      	mov	r0, r5
 8003a10:	f7ff faf4 	bl	8002ffc <_free_r>
 8003a14:	2300      	movs	r3, #0
 8003a16:	6363      	str	r3, [r4, #52]	; 0x34
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003a1e:	81a3      	strh	r3, [r4, #12]
 8003a20:	2300      	movs	r3, #0
 8003a22:	6063      	str	r3, [r4, #4]
 8003a24:	6923      	ldr	r3, [r4, #16]
 8003a26:	6023      	str	r3, [r4, #0]
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	f043 0308 	orr.w	r3, r3, #8
 8003a2e:	81a3      	strh	r3, [r4, #12]
 8003a30:	6923      	ldr	r3, [r4, #16]
 8003a32:	b94b      	cbnz	r3, 8003a48 <__swsetup_r+0x7c>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003a3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a3e:	d003      	beq.n	8003a48 <__swsetup_r+0x7c>
 8003a40:	4621      	mov	r1, r4
 8003a42:	4628      	mov	r0, r5
 8003a44:	f000 f884 	bl	8003b50 <__smakebuf_r>
 8003a48:	89a0      	ldrh	r0, [r4, #12]
 8003a4a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003a4e:	f010 0301 	ands.w	r3, r0, #1
 8003a52:	d00a      	beq.n	8003a6a <__swsetup_r+0x9e>
 8003a54:	2300      	movs	r3, #0
 8003a56:	60a3      	str	r3, [r4, #8]
 8003a58:	6963      	ldr	r3, [r4, #20]
 8003a5a:	425b      	negs	r3, r3
 8003a5c:	61a3      	str	r3, [r4, #24]
 8003a5e:	6923      	ldr	r3, [r4, #16]
 8003a60:	b943      	cbnz	r3, 8003a74 <__swsetup_r+0xa8>
 8003a62:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003a66:	d1c4      	bne.n	80039f2 <__swsetup_r+0x26>
 8003a68:	bd38      	pop	{r3, r4, r5, pc}
 8003a6a:	0781      	lsls	r1, r0, #30
 8003a6c:	bf58      	it	pl
 8003a6e:	6963      	ldrpl	r3, [r4, #20]
 8003a70:	60a3      	str	r3, [r4, #8]
 8003a72:	e7f4      	b.n	8003a5e <__swsetup_r+0x92>
 8003a74:	2000      	movs	r0, #0
 8003a76:	e7f7      	b.n	8003a68 <__swsetup_r+0x9c>
 8003a78:	20000064 	.word	0x20000064

08003a7c <_raise_r>:
 8003a7c:	291f      	cmp	r1, #31
 8003a7e:	b538      	push	{r3, r4, r5, lr}
 8003a80:	4604      	mov	r4, r0
 8003a82:	460d      	mov	r5, r1
 8003a84:	d904      	bls.n	8003a90 <_raise_r+0x14>
 8003a86:	2316      	movs	r3, #22
 8003a88:	6003      	str	r3, [r0, #0]
 8003a8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a8e:	bd38      	pop	{r3, r4, r5, pc}
 8003a90:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8003a92:	b112      	cbz	r2, 8003a9a <_raise_r+0x1e>
 8003a94:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8003a98:	b94b      	cbnz	r3, 8003aae <_raise_r+0x32>
 8003a9a:	4620      	mov	r0, r4
 8003a9c:	f000 f830 	bl	8003b00 <_getpid_r>
 8003aa0:	462a      	mov	r2, r5
 8003aa2:	4601      	mov	r1, r0
 8003aa4:	4620      	mov	r0, r4
 8003aa6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003aaa:	f000 b817 	b.w	8003adc <_kill_r>
 8003aae:	2b01      	cmp	r3, #1
 8003ab0:	d00a      	beq.n	8003ac8 <_raise_r+0x4c>
 8003ab2:	1c59      	adds	r1, r3, #1
 8003ab4:	d103      	bne.n	8003abe <_raise_r+0x42>
 8003ab6:	2316      	movs	r3, #22
 8003ab8:	6003      	str	r3, [r0, #0]
 8003aba:	2001      	movs	r0, #1
 8003abc:	e7e7      	b.n	8003a8e <_raise_r+0x12>
 8003abe:	2400      	movs	r4, #0
 8003ac0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8003ac4:	4628      	mov	r0, r5
 8003ac6:	4798      	blx	r3
 8003ac8:	2000      	movs	r0, #0
 8003aca:	e7e0      	b.n	8003a8e <_raise_r+0x12>

08003acc <raise>:
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <raise+0xc>)
 8003ace:	4601      	mov	r1, r0
 8003ad0:	6818      	ldr	r0, [r3, #0]
 8003ad2:	f7ff bfd3 	b.w	8003a7c <_raise_r>
 8003ad6:	bf00      	nop
 8003ad8:	20000064 	.word	0x20000064

08003adc <_kill_r>:
 8003adc:	b538      	push	{r3, r4, r5, lr}
 8003ade:	4d07      	ldr	r5, [pc, #28]	; (8003afc <_kill_r+0x20>)
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	4608      	mov	r0, r1
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	602b      	str	r3, [r5, #0]
 8003aea:	f7fd fb7d 	bl	80011e8 <_kill>
 8003aee:	1c43      	adds	r3, r0, #1
 8003af0:	d102      	bne.n	8003af8 <_kill_r+0x1c>
 8003af2:	682b      	ldr	r3, [r5, #0]
 8003af4:	b103      	cbz	r3, 8003af8 <_kill_r+0x1c>
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	bd38      	pop	{r3, r4, r5, pc}
 8003afa:	bf00      	nop
 8003afc:	20000214 	.word	0x20000214

08003b00 <_getpid_r>:
 8003b00:	f7fd bb6a 	b.w	80011d8 <_getpid>

08003b04 <__swhatbuf_r>:
 8003b04:	b570      	push	{r4, r5, r6, lr}
 8003b06:	460c      	mov	r4, r1
 8003b08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003b0c:	2900      	cmp	r1, #0
 8003b0e:	b096      	sub	sp, #88	; 0x58
 8003b10:	4615      	mov	r5, r2
 8003b12:	461e      	mov	r6, r3
 8003b14:	da0d      	bge.n	8003b32 <__swhatbuf_r+0x2e>
 8003b16:	89a3      	ldrh	r3, [r4, #12]
 8003b18:	f013 0f80 	tst.w	r3, #128	; 0x80
 8003b1c:	f04f 0100 	mov.w	r1, #0
 8003b20:	bf0c      	ite	eq
 8003b22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8003b26:	2340      	movne	r3, #64	; 0x40
 8003b28:	2000      	movs	r0, #0
 8003b2a:	6031      	str	r1, [r6, #0]
 8003b2c:	602b      	str	r3, [r5, #0]
 8003b2e:	b016      	add	sp, #88	; 0x58
 8003b30:	bd70      	pop	{r4, r5, r6, pc}
 8003b32:	466a      	mov	r2, sp
 8003b34:	f000 f848 	bl	8003bc8 <_fstat_r>
 8003b38:	2800      	cmp	r0, #0
 8003b3a:	dbec      	blt.n	8003b16 <__swhatbuf_r+0x12>
 8003b3c:	9901      	ldr	r1, [sp, #4]
 8003b3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8003b42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8003b46:	4259      	negs	r1, r3
 8003b48:	4159      	adcs	r1, r3
 8003b4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4e:	e7eb      	b.n	8003b28 <__swhatbuf_r+0x24>

08003b50 <__smakebuf_r>:
 8003b50:	898b      	ldrh	r3, [r1, #12]
 8003b52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003b54:	079d      	lsls	r5, r3, #30
 8003b56:	4606      	mov	r6, r0
 8003b58:	460c      	mov	r4, r1
 8003b5a:	d507      	bpl.n	8003b6c <__smakebuf_r+0x1c>
 8003b5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003b60:	6023      	str	r3, [r4, #0]
 8003b62:	6123      	str	r3, [r4, #16]
 8003b64:	2301      	movs	r3, #1
 8003b66:	6163      	str	r3, [r4, #20]
 8003b68:	b002      	add	sp, #8
 8003b6a:	bd70      	pop	{r4, r5, r6, pc}
 8003b6c:	ab01      	add	r3, sp, #4
 8003b6e:	466a      	mov	r2, sp
 8003b70:	f7ff ffc8 	bl	8003b04 <__swhatbuf_r>
 8003b74:	9900      	ldr	r1, [sp, #0]
 8003b76:	4605      	mov	r5, r0
 8003b78:	4630      	mov	r0, r6
 8003b7a:	f7ff fab3 	bl	80030e4 <_malloc_r>
 8003b7e:	b948      	cbnz	r0, 8003b94 <__smakebuf_r+0x44>
 8003b80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b84:	059a      	lsls	r2, r3, #22
 8003b86:	d4ef      	bmi.n	8003b68 <__smakebuf_r+0x18>
 8003b88:	f023 0303 	bic.w	r3, r3, #3
 8003b8c:	f043 0302 	orr.w	r3, r3, #2
 8003b90:	81a3      	strh	r3, [r4, #12]
 8003b92:	e7e3      	b.n	8003b5c <__smakebuf_r+0xc>
 8003b94:	89a3      	ldrh	r3, [r4, #12]
 8003b96:	6020      	str	r0, [r4, #0]
 8003b98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b9c:	81a3      	strh	r3, [r4, #12]
 8003b9e:	9b00      	ldr	r3, [sp, #0]
 8003ba0:	6163      	str	r3, [r4, #20]
 8003ba2:	9b01      	ldr	r3, [sp, #4]
 8003ba4:	6120      	str	r0, [r4, #16]
 8003ba6:	b15b      	cbz	r3, 8003bc0 <__smakebuf_r+0x70>
 8003ba8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003bac:	4630      	mov	r0, r6
 8003bae:	f000 f81d 	bl	8003bec <_isatty_r>
 8003bb2:	b128      	cbz	r0, 8003bc0 <__smakebuf_r+0x70>
 8003bb4:	89a3      	ldrh	r3, [r4, #12]
 8003bb6:	f023 0303 	bic.w	r3, r3, #3
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	81a3      	strh	r3, [r4, #12]
 8003bc0:	89a3      	ldrh	r3, [r4, #12]
 8003bc2:	431d      	orrs	r5, r3
 8003bc4:	81a5      	strh	r5, [r4, #12]
 8003bc6:	e7cf      	b.n	8003b68 <__smakebuf_r+0x18>

08003bc8 <_fstat_r>:
 8003bc8:	b538      	push	{r3, r4, r5, lr}
 8003bca:	4d07      	ldr	r5, [pc, #28]	; (8003be8 <_fstat_r+0x20>)
 8003bcc:	2300      	movs	r3, #0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	4611      	mov	r1, r2
 8003bd4:	602b      	str	r3, [r5, #0]
 8003bd6:	f7fd fb66 	bl	80012a6 <_fstat>
 8003bda:	1c43      	adds	r3, r0, #1
 8003bdc:	d102      	bne.n	8003be4 <_fstat_r+0x1c>
 8003bde:	682b      	ldr	r3, [r5, #0]
 8003be0:	b103      	cbz	r3, 8003be4 <_fstat_r+0x1c>
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	bd38      	pop	{r3, r4, r5, pc}
 8003be6:	bf00      	nop
 8003be8:	20000214 	.word	0x20000214

08003bec <_isatty_r>:
 8003bec:	b538      	push	{r3, r4, r5, lr}
 8003bee:	4d06      	ldr	r5, [pc, #24]	; (8003c08 <_isatty_r+0x1c>)
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	4604      	mov	r4, r0
 8003bf4:	4608      	mov	r0, r1
 8003bf6:	602b      	str	r3, [r5, #0]
 8003bf8:	f7fd fb65 	bl	80012c6 <_isatty>
 8003bfc:	1c43      	adds	r3, r0, #1
 8003bfe:	d102      	bne.n	8003c06 <_isatty_r+0x1a>
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	b103      	cbz	r3, 8003c06 <_isatty_r+0x1a>
 8003c04:	6023      	str	r3, [r4, #0]
 8003c06:	bd38      	pop	{r3, r4, r5, pc}
 8003c08:	20000214 	.word	0x20000214

08003c0c <_init>:
 8003c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c0e:	bf00      	nop
 8003c10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c12:	bc08      	pop	{r3}
 8003c14:	469e      	mov	lr, r3
 8003c16:	4770      	bx	lr

08003c18 <_fini>:
 8003c18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1a:	bf00      	nop
 8003c1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c1e:	bc08      	pop	{r3}
 8003c20:	469e      	mov	lr, r3
 8003c22:	4770      	bx	lr
